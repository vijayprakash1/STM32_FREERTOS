
RTOS_TRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  20000010  080056dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  080056dc  00020e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001569d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d53  00000000  00000000  000356dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022282  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e78d  00000000  00000000  0005cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d003b  00000000  00000000  0006b427  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  0013b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055ac 	.word	0x080055ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080055ac 	.word	0x080055ac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f8db 	bl	8000696 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	2000      	movs	r0, #0
 80004e2:	f004 ff51 	bl	8005388 <HAL_InitTick>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	e001      	b.n	80004f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f2:	f004 fecd 	bl	8005290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_IncTick+0x1c>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_IncTick+0x20>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4413      	add	r3, r2
 800050e:	4a03      	ldr	r2, [pc, #12]	; (800051c <HAL_IncTick+0x1c>)
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	20000d30 	.word	0x20000d30
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return uwTick;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <HAL_GetTick+0x14>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000d30 	.word	0x20000d30

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff4c 	bl	800053c <__NVIC_SetPriorityGrouping>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006be:	f7ff ff61 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	6978      	ldr	r0, [r7, #20]
 80006ca:	f7ff ffb1 	bl	8000630 <NVIC_EncodePriority>
 80006ce:	4602      	mov	r2, r0
 80006d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff80 	bl	80005dc <__NVIC_SetPriority>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff54 	bl	80005a0 <__NVIC_EnableIRQ>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800070e:	e148      	b.n	80009a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	2101      	movs	r1, #1
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	fa01 f303 	lsl.w	r3, r1, r3
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 813a 	beq.w	800099c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d003      	beq.n	8000738 <HAL_GPIO_Init+0x38>
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2b12      	cmp	r3, #18
 8000736:	d123      	bne.n	8000780 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	08da      	lsrs	r2, r3, #3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3208      	adds	r2, #8
 8000740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000744:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	f003 0307 	and.w	r3, r3, #7
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	220f      	movs	r2, #15
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	691a      	ldr	r2, [r3, #16]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	4313      	orrs	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	08da      	lsrs	r2, r3, #3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3208      	adds	r2, #8
 800077a:	6939      	ldr	r1, [r7, #16]
 800077c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	2203      	movs	r2, #3
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	43db      	mvns	r3, r3
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 0203 	and.w	r2, r3, #3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d00b      	beq.n	80007d4 <HAL_GPIO_Init+0xd4>
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d007      	beq.n	80007d4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c8:	2b11      	cmp	r3, #17
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b12      	cmp	r3, #18
 80007d2:	d130      	bne.n	8000836 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800080a:	2201      	movs	r2, #1
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4013      	ands	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	f003 0201 	and.w	r2, r3, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2203      	movs	r2, #3
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 8094 	beq.w	800099c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000874:	4b52      	ldr	r3, [pc, #328]	; (80009c0 <HAL_GPIO_Init+0x2c0>)
 8000876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000878:	4a51      	ldr	r2, [pc, #324]	; (80009c0 <HAL_GPIO_Init+0x2c0>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6613      	str	r3, [r2, #96]	; 0x60
 8000880:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <HAL_GPIO_Init+0x2c0>)
 8000882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800088c:	4a4d      	ldr	r2, [pc, #308]	; (80009c4 <HAL_GPIO_Init+0x2c4>)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	089b      	lsrs	r3, r3, #2
 8000892:	3302      	adds	r3, #2
 8000894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	220f      	movs	r2, #15
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008b6:	d00d      	beq.n	80008d4 <HAL_GPIO_Init+0x1d4>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a43      	ldr	r2, [pc, #268]	; (80009c8 <HAL_GPIO_Init+0x2c8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d007      	beq.n	80008d0 <HAL_GPIO_Init+0x1d0>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a42      	ldr	r2, [pc, #264]	; (80009cc <HAL_GPIO_Init+0x2cc>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d101      	bne.n	80008cc <HAL_GPIO_Init+0x1cc>
 80008c8:	2302      	movs	r3, #2
 80008ca:	e004      	b.n	80008d6 <HAL_GPIO_Init+0x1d6>
 80008cc:	2307      	movs	r3, #7
 80008ce:	e002      	b.n	80008d6 <HAL_GPIO_Init+0x1d6>
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <HAL_GPIO_Init+0x1d6>
 80008d4:	2300      	movs	r3, #0
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	f002 0203 	and.w	r2, r2, #3
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	4093      	lsls	r3, r2
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008e6:	4937      	ldr	r1, [pc, #220]	; (80009c4 <HAL_GPIO_Init+0x2c4>)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	3302      	adds	r3, #2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000942:	4a23      	ldr	r2, [pc, #140]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_GPIO_Init+0x2d0>)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa22 f303 	lsr.w	r3, r2, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f47f aeaf 	bne.w	8000710 <HAL_GPIO_Init+0x10>
  }
}
 80009b2:	bf00      	nop
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010000 	.word	0x40010000
 80009c8:	48000400 	.word	0x48000400
 80009cc:	48000800 	.word	0x48000800
 80009d0:	40010400 	.word	0x40010400

080009d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691a      	ldr	r2, [r3, #16]
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e001      	b.n	80009f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
 8000a10:	4613      	mov	r3, r2
 8000a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a14:	787b      	ldrb	r3, [r7, #1]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a1a:	887a      	ldrh	r2, [r7, #2]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a22:	887a      	ldrh	r2, [r7, #2]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a4c:	887a      	ldrh	r2, [r7, #2]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a54:	887a      	ldrh	r2, [r7, #2]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	619a      	str	r2, [r3, #24]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40007000 	.word	0x40007000

08000a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab2:	d130      	bne.n	8000b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac0:	d038      	beq.n	8000b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aca:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2232      	movs	r2, #50	; 0x32
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ae8:	e002      	b.n	8000af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000afc:	d102      	bne.n	8000b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f2      	bne.n	8000aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b10:	d110      	bne.n	8000b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e00f      	b.n	8000b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b22:	d007      	beq.n	8000b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40007000 	.word	0x40007000
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	431bde83 	.word	0x431bde83

08000b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e3db      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b62:	4ba4      	ldr	r3, [pc, #656]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b6c:	4ba1      	ldr	r3, [pc, #644]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 80e1 	beq.w	8000d46 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <HAL_RCC_OscConfig+0x4a>
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2b0c      	cmp	r3, #12
 8000b8e:	f040 8088 	bne.w	8000ca2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	f040 8084 	bne.w	8000ca2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b9a:	4b96      	ldr	r3, [pc, #600]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x62>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e3b3      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a1a      	ldr	r2, [r3, #32]
 8000bb6:	4b8f      	ldr	r3, [pc, #572]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <HAL_RCC_OscConfig+0x7c>
 8000bc2:	4b8c      	ldr	r3, [pc, #560]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bca:	e005      	b.n	8000bd8 <HAL_RCC_OscConfig+0x88>
 8000bcc:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d223      	bcs.n	8000c24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fd79 	bl	80016d8 <RCC_SetFlashLatencyFromMSIRange>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e394      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bf0:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a7f      	ldr	r2, [pc, #508]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b7d      	ldr	r3, [pc, #500]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	497a      	ldr	r1, [pc, #488]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c0e:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	4975      	ldr	r1, [pc, #468]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	604b      	str	r3, [r1, #4]
 8000c22:	e022      	b.n	8000c6a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c24:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a72      	ldr	r2, [pc, #456]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	496d      	ldr	r1, [pc, #436]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c42:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	4968      	ldr	r1, [pc, #416]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fd3c 	bl	80016d8 <RCC_SetFlashLatencyFromMSIRange>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e357      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c6a:	f000 fc41 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8000c6e:	4601      	mov	r1, r0
 8000c70:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	4a5f      	ldr	r2, [pc, #380]	; (8000df8 <HAL_RCC_OscConfig+0x2a8>)
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	fa21 f303 	lsr.w	r3, r1, r3
 8000c86:	4a5d      	ldr	r2, [pc, #372]	; (8000dfc <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_RCC_OscConfig+0x2b0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fb7a 	bl	8005388 <HAL_InitTick>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d052      	beq.n	8000d44 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	e33b      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d032      	beq.n	8000d10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000caa:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fc35 	bl	8000524 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cbe:	f7ff fc31 	bl	8000524 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e324      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cd0:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f0      	beq.n	8000cbe <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cdc:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	493f      	ldr	r1, [pc, #252]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	493a      	ldr	r1, [pc, #232]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
 8000d0e:	e01a      	b.n	8000d46 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d10:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a37      	ldr	r2, [pc, #220]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc02 	bl	8000524 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d24:	f7ff fbfe 	bl	8000524 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e2f1      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1d4>
 8000d42:	e000      	b.n	8000d46 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d074      	beq.n	8000e3c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d005      	beq.n	8000d64 <HAL_RCC_OscConfig+0x214>
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2b0c      	cmp	r3, #12
 8000d5c:	d10e      	bne.n	8000d7c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d10b      	bne.n	8000d7c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d064      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2ea>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d160      	bne.n	8000e3a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e2ce      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d84:	d106      	bne.n	8000d94 <HAL_RCC_OscConfig+0x244>
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01d      	b.n	8000dd0 <HAL_RCC_OscConfig+0x280>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x268>
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0x280>
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_RCC_OscConfig+0x2a4>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d01c      	beq.n	8000e12 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fba4 	bl	8000524 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dde:	e011      	b.n	8000e04 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fba0 	bl	8000524 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d90a      	bls.n	8000e04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e293      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	08005674 	.word	0x08005674
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e04:	4bae      	ldr	r3, [pc, #696]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0e7      	beq.n	8000de0 <HAL_RCC_OscConfig+0x290>
 8000e10:	e014      	b.n	8000e3c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e12:	f7ff fb87 	bl	8000524 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fb83 	bl	8000524 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b64      	cmp	r3, #100	; 0x64
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e276      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e2c:	4ba4      	ldr	r3, [pc, #656]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f0      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2ca>
 8000e38:	e000      	b.n	8000e3c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d060      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x30a>
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	d119      	bne.n	8000e88 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d116      	bne.n	8000e88 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e5a:	4b99      	ldr	r3, [pc, #612]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x322>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e253      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b93      	ldr	r3, [pc, #588]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	061b      	lsls	r3, r3, #24
 8000e80:	498f      	ldr	r1, [pc, #572]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e86:	e040      	b.n	8000f0a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e90:	4b8b      	ldr	r3, [pc, #556]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a8a      	ldr	r2, [pc, #552]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb42 	bl	8000524 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fb3e 	bl	8000524 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e231      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b7f      	ldr	r3, [pc, #508]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	061b      	lsls	r3, r3, #24
 8000ed0:	497b      	ldr	r1, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]
 8000ed6:	e018      	b.n	8000f0a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed8:	4b79      	ldr	r3, [pc, #484]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a78      	ldr	r2, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fb1e 	bl	8000524 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fb1a 	bl	8000524 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e20d      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000efe:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d03c      	beq.n	8000f90 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01c      	beq.n	8000f58 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1e:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f24:	4a66      	ldr	r2, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f2e:	f7ff faf9 	bl	8000524 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f36:	f7ff faf5 	bl	8000524 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1e8      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0ef      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3e6>
 8000f56:	e01b      	b.n	8000f90 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f68:	f7ff fadc 	bl	8000524 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fad8 	bl	8000524 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e1cb      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f82:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ef      	bne.n	8000f70 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80a5 	beq.w	80010e8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10d      	bne.n	8000fca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fca:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <HAL_RCC_OscConfig+0x574>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d118      	bne.n	8001008 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_RCC_OscConfig+0x574>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <HAL_RCC_OscConfig+0x574>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fa9f 	bl	8000524 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fea:	f7ff fa9b 	bl	8000524 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e18e      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_RCC_OscConfig+0x574>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_RCC_OscConfig+0x4d2>
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001020:	e024      	b.n	800106c <HAL_RCC_OscConfig+0x51c>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d110      	bne.n	800104c <HAL_RCC_OscConfig+0x4fc>
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 800102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800104a:	e00f      	b.n	800106c <HAL_RCC_OscConfig+0x51c>
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 800104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001052:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 800105e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d016      	beq.n	80010a2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fa56 	bl	8000524 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107a:	e00a      	b.n	8001092 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107c:	f7ff fa52 	bl	8000524 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f241 3288 	movw	r2, #5000	; 0x1388
 800108a:	4293      	cmp	r3, r2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e143      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_OscConfig+0x570>)
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ed      	beq.n	800107c <HAL_RCC_OscConfig+0x52c>
 80010a0:	e019      	b.n	80010d6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a2:	f7ff fa3f 	bl	8000524 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a8:	e00e      	b.n	80010c8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fa3b 	bl	8000524 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d905      	bls.n	80010c8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e12c      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010c8:	4b96      	ldr	r3, [pc, #600]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e9      	bne.n	80010aa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010d6:	7ffb      	ldrb	r3, [r7, #31]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d105      	bne.n	80010e8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010dc:	4b91      	ldr	r3, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	4a90      	ldr	r2, [pc, #576]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80010e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d03c      	beq.n	800116e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01c      	beq.n	8001136 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010fc:	4b89      	ldr	r3, [pc, #548]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80010fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001102:	4a88      	ldr	r2, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110c:	f7ff fa0a 	bl	8000524 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001114:	f7ff fa06 	bl	8000524 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e0f9      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001126:	4b7f      	ldr	r3, [pc, #508]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ef      	beq.n	8001114 <HAL_RCC_OscConfig+0x5c4>
 8001134:	e01b      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001136:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001146:	f7ff f9ed 	bl	8000524 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114e:	f7ff f9e9 	bl	8000524 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e0dc      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001160:	4b70      	ldr	r3, [pc, #448]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ef      	bne.n	800114e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80d0 	beq.w	8001318 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2b0c      	cmp	r3, #12
 800117c:	f000 808d 	beq.w	800129a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	2b02      	cmp	r3, #2
 8001186:	d15a      	bne.n	800123e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b66      	ldr	r3, [pc, #408]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a65      	ldr	r2, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800118e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff f9c6 	bl	8000524 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff f9c2 	bl	8000524 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0b5      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ae:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ba:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <HAL_RCC_OscConfig+0x7d8>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011ca:	3a01      	subs	r2, #1
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011d4:	0212      	lsls	r2, r2, #8
 80011d6:	4311      	orrs	r1, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011dc:	0852      	lsrs	r2, r2, #1
 80011de:	3a01      	subs	r2, #1
 80011e0:	0552      	lsls	r2, r2, #21
 80011e2:	4311      	orrs	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011e8:	0852      	lsrs	r2, r2, #1
 80011ea:	3a01      	subs	r2, #1
 80011ec:	0652      	lsls	r2, r2, #25
 80011ee:	4311      	orrs	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011f4:	06d2      	lsls	r2, r2, #27
 80011f6:	430a      	orrs	r2, r1
 80011f8:	494a      	ldr	r1, [pc, #296]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001208:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001214:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff f985 	bl	8000524 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121e:	f7ff f981 	bl	8000524 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e074      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x6ce>
 800123c:	e06c      	b.n	8001318 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a38      	ldr	r2, [pc, #224]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001248:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 8001268:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff f957 	bl	8000524 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff f953 	bl	8000524 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e046      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x72a>
 8001298:	e03e      	b.n	8001318 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e039      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_RCC_OscConfig+0x7d4>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d12c      	bne.n	8001314 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	3b01      	subs	r3, #1
 80012c6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d123      	bne.n	8001314 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d8:	429a      	cmp	r2, r3
 80012da:	d11b      	bne.n	8001314 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d113      	bne.n	8001314 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	3b01      	subs	r3, #1
 80012fa:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d109      	bne.n	8001314 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	3b01      	subs	r3, #1
 800130e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	019d808c 	.word	0x019d808c

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0c8      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d910      	bls.n	8001370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0207 	bic.w	r2, r3, #7
 8001356:	4961      	ldr	r1, [pc, #388]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0b0      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d04c      	beq.n	8001416 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d107      	bne.n	8001394 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001384:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d121      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e09e      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d107      	bne.n	80013ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d115      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e092      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e086      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c4:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e07e      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013d4:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 0203 	bic.w	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	493f      	ldr	r1, [pc, #252]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013e6:	f7ff f89d 	bl	8000524 <HAL_GetTick>
 80013ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ee:	f7ff f899 	bl	8000524 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e066      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 020c 	and.w	r2, r3, #12
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	429a      	cmp	r2, r3
 8001414:	d1eb      	bne.n	80013ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	492c      	ldr	r1, [pc, #176]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e036      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4918      	ldr	r1, [pc, #96]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4910      	ldr	r1, [pc, #64]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a2:	f000 f825 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80014a6:	4601      	mov	r1, r0
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_ClockConfig+0x1b4>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	fa21 f303 	lsr.w	r3, r1, r3
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 ff5e 	bl	8005388 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80014d0:	7afb      	ldrb	r3, [r7, #11]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08005674 	.word	0x08005674
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x34>
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d121      	bne.n	8001562 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d11e      	bne.n	8001562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e005      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10d      	bne.n	8001578 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d102      	bne.n	800156e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	e004      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b08      	cmp	r3, #8
 8001572:	d101      	bne.n	8001578 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_GetSysClockFreq+0x110>)
 8001576:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d133      	bne.n	80015e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0xa4>
 800158e:	2b03      	cmp	r3, #3
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0xaa>
 8001592:	e005      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001596:	617b      	str	r3, [r7, #20]
      break;
 8001598:	e005      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_GetSysClockFreq+0x110>)
 800159c:	617b      	str	r3, [r7, #20]
      break;
 800159e:	e002      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	617b      	str	r3, [r7, #20]
      break;
 80015a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	3301      	adds	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	fb02 f203 	mul.w	r2, r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0e5b      	lsrs	r3, r3, #25
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015e6:	69bb      	ldr	r3, [r7, #24]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3724      	adds	r7, #36	; 0x24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000
 80015f8:	0800568c 	.word	0x0800568c
 80015fc:	00f42400 	.word	0x00f42400
 8001600:	007a1200 	.word	0x007a1200

08001604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_GetHCLKFreq+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000000c 	.word	0x2000000c

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001620:	f7ff fff0 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001624:	4601      	mov	r1, r0
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	08005684 	.word	0x08005684

08001648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800164c:	f7ff ffda 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001650:	4601      	mov	r1, r0
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x28>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	08005684 	.word	0x08005684

08001674 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	220f      	movs	r2, #15
 8001682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_GetClockConfig+0x5c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_GetClockConfig+0x5c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_RCC_GetClockConfig+0x60>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0207 	and.w	r2, r3, #7
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40022000 	.word	0x40022000

080016d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f0:	f7ff f9ca 	bl	8000a88 <HAL_PWREx_GetVoltageRange>
 80016f4:	6178      	str	r0, [r7, #20]
 80016f6:	e014      	b.n	8001722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001710:	f7ff f9ba 	bl	8000a88 <HAL_PWREx_GetVoltageRange>
 8001714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001728:	d10b      	bne.n	8001742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b80      	cmp	r3, #128	; 0x80
 800172e:	d919      	bls.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2ba0      	cmp	r3, #160	; 0xa0
 8001734:	d902      	bls.n	800173c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	e013      	b.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800173c:	2301      	movs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	e010      	b.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b80      	cmp	r3, #128	; 0x80
 8001746:	d902      	bls.n	800174e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001748:	2303      	movs	r3, #3
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e00a      	b.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b80      	cmp	r3, #128	; 0x80
 8001752:	d102      	bne.n	800175a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e004      	b.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b70      	cmp	r3, #112	; 0x70
 800175e:	d101      	bne.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 0207 	bic.w	r2, r3, #7
 800176c:	4909      	ldr	r1, [pc, #36]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80017a0:	2300      	movs	r3, #0
 80017a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017a4:	2300      	movs	r3, #0
 80017a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02f      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017bc:	d005      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80017be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80017c2:	d015      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80017c8:	e00f      	b.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80017ca:	4bac      	ldr	r3, [pc, #688]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	4aab      	ldr	r2, [pc, #684]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017d6:	e00c      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f9dc 	bl	8001b9c <RCCEx_PLLSAI1_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017e8:	e003      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	74fb      	strb	r3, [r7, #19]
      break;
 80017ee:	e000      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80017f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017f8:	4ba0      	ldr	r3, [pc, #640]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	499d      	ldr	r1, [pc, #628]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800180e:	e001      	b.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8099 	beq.w	8001954 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001826:	4b95      	ldr	r3, [pc, #596]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001836:	2300      	movs	r3, #0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00d      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b8f      	ldr	r3, [pc, #572]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a8e      	ldr	r2, [pc, #568]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001854:	2301      	movs	r3, #1
 8001856:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001858:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a88      	ldr	r2, [pc, #544]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001864:	f7fe fe5e 	bl	8000524 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800186a:	e009      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186c:	f7fe fe5a 	bl	8000524 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d902      	bls.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	74fb      	strb	r3, [r7, #19]
        break;
 800187e:	e005      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001880:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ef      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800188c:	7cfb      	ldrb	r3, [r7, #19]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d155      	bne.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01e      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d019      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018ca:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80018da:	4a68      	ldr	r2, [pc, #416]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7fe fe1a 	bl	8000524 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00b      	b.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7fe fe16 	bl	8000524 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d902      	bls.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	74fb      	strb	r3, [r7, #19]
            break;
 800190a:	e006      	b.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190c:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ec      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800191a:	7cfb      	ldrb	r3, [r7, #19]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001920:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192e:	4953      	ldr	r1, [pc, #332]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001936:	e004      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001938:	7cfb      	ldrb	r3, [r7, #19]
 800193a:	74bb      	strb	r3, [r7, #18]
 800193c:	e001      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7c7b      	ldrb	r3, [r7, #17]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4943      	ldr	r1, [pc, #268]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001988:	f023 020c 	bic.w	r2, r3, #12
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	493a      	ldr	r1, [pc, #232]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	4932      	ldr	r1, [pc, #200]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	4929      	ldr	r1, [pc, #164]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	4921      	ldr	r1, [pc, #132]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	4918      	ldr	r1, [pc, #96]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4910      	ldr	r1, [pc, #64]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02c      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a6c:	d10a      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4a02      	ldr	r2, [pc, #8]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a78:	60d3      	str	r3, [r2, #12]
 8001a7a:	e015      	b.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f881 	bl	8001b9c <RCCEx_PLLSAI1_Config>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001a9e:	7cfb      	ldrb	r3, [r7, #19]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d028      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ade:	60d3      	str	r3, [r2, #12]
 8001ae0:	e011      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	2101      	movs	r1, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f852 	bl	8001b9c <RCCEx_PLLSAI1_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001afc:	7cfb      	ldrb	r3, [r7, #19]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01c      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	4915      	ldr	r1, [pc, #84]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2102      	movs	r1, #2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f82f 	bl	8001b9c <RCCEx_PLLSAI1_Config>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001b48:	7cfb      	ldrb	r3, [r7, #19]
 8001b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d018      	beq.n	8001be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d10d      	bne.n	8001be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d044      	beq.n	8001c6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e041      	b.n	8001c6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d00c      	beq.n	8001c0a <RCCEx_PLLSAI1_Config+0x6e>
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d013      	beq.n	8001c1c <RCCEx_PLLSAI1_Config+0x80>
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d120      	bne.n	8001c3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bf8:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d11d      	bne.n	8001c40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c08:	e01a      	b.n	8001c40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c1a:	e013      	b.n	8001c44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c1c:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10f      	bne.n	8001c48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001c38:	e006      	b.n	8001c48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c3e:	e004      	b.n	8001c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c40:	bf00      	nop
 8001c42:	e002      	b.n	8001c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c44:	bf00      	nop
 8001c46:	e000      	b.n	8001c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c48:	bf00      	nop
    }

    if(status == HAL_OK)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10d      	bne.n	8001c6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	430b      	orrs	r3, r1
 8001c66:	4944      	ldr	r1, [pc, #272]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d17c      	bne.n	8001d6c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7e:	f7fe fc51 	bl	8000524 <HAL_GetTick>
 8001c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c84:	e009      	b.n	8001c9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c86:	f7fe fc4d 	bl	8000524 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d902      	bls.n	8001c9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	73fb      	strb	r3, [r7, #15]
        break;
 8001c98:	e005      	b.n	8001ca6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d15f      	bne.n	8001d6c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d110      	bne.n	8001cd4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	0211      	lsls	r1, r2, #8
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68d2      	ldr	r2, [r2, #12]
 8001cc8:	06d2      	lsls	r2, r2, #27
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	492a      	ldr	r1, [pc, #168]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	610b      	str	r3, [r1, #16]
 8001cd2:	e027      	b.n	8001d24 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d112      	bne.n	8001d00 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6892      	ldr	r2, [r2, #8]
 8001cea:	0211      	lsls	r1, r2, #8
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6912      	ldr	r2, [r2, #16]
 8001cf0:	0852      	lsrs	r2, r2, #1
 8001cf2:	3a01      	subs	r2, #1
 8001cf4:	0552      	lsls	r2, r2, #21
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	491f      	ldr	r1, [pc, #124]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	610b      	str	r3, [r1, #16]
 8001cfe:	e011      	b.n	8001d24 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6892      	ldr	r2, [r2, #8]
 8001d10:	0211      	lsls	r1, r2, #8
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6952      	ldr	r2, [r2, #20]
 8001d16:	0852      	lsrs	r2, r2, #1
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0652      	lsls	r2, r2, #25
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4916      	ldr	r1, [pc, #88]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7fe fbf8 	bl	8000524 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d36:	e009      	b.n	8001d4c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d38:	f7fe fbf4 	bl	8000524 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d902      	bls.n	8001d4c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	73fb      	strb	r3, [r7, #15]
          break;
 8001d4a:	e005      	b.n	8001d58 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4904      	ldr	r1, [pc, #16]	; (8001d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01d      	b.n	8001dca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f815 	bl	8001dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 f986 	bl	80020cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_Base_Start_IT+0x50>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d00b      	beq.n	8001e2a <HAL_TIM_Base_Start_IT+0x42>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d007      	beq.n	8001e2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	00010007 	.word	0x00010007

08001e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0202 	mvn.w	r2, #2
 8001e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f905 	bl	800208e <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8f7 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f908 	bl	80020a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8db 	bl	800208e <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8cd 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8de 	bl	80020a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0208 	mvn.w	r2, #8
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8b1 	bl	800208e <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8a3 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8b4 	bl	80020a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0210 	mvn.w	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f887 	bl	800208e <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f879 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f88a 	bl	80020a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f003 f952 	bl	8005264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8de 	bl	80021a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ffa:	d10e      	bne.n	800201a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d107      	bne.n	800201a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8d1 	bl	80021bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d10e      	bne.n	8002046 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d107      	bne.n	8002046 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f838 	bl	80020b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d10e      	bne.n	8002072 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b20      	cmp	r3, #32
 8002060:	d107      	bne.n	8002072 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0220 	mvn.w	r2, #32
 800206a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f891 	bl	8002194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a2a      	ldr	r2, [pc, #168]	; (8002188 <TIM_Base_SetConfig+0xbc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x20>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a21      	ldr	r2, [pc, #132]	; (8002188 <TIM_Base_SetConfig+0xbc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0x52>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0x52>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <TIM_Base_SetConfig+0xc0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0x52>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <TIM_Base_SetConfig+0xc4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <TIM_Base_SetConfig+0xbc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0xa0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <TIM_Base_SetConfig+0xc0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0xa0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <TIM_Base_SetConfig+0xc4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d103      	bne.n	8002174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	615a      	str	r2, [r3, #20]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40014000 	.word	0x40014000
 8002190:	40014400 	.word	0x40014400

08002194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e040      	b.n	8002264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f003 f874 	bl	80052e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8c0 	bl	8002394 <UART_SetConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e022      	b.n	8002264 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fb7e 	bl	8002928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800223a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800224a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fc05 	bl	8002a6c <UART_CheckIdleState>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	2b20      	cmp	r3, #32
 8002282:	f040 8081 	bne.w	8002388 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_UART_Transmit+0x26>
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e079      	b.n	800238a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_UART_Transmit+0x38>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e072      	b.n	800238a <HAL_UART_Transmit+0x11e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80022b8:	f7fe f934 	bl	8000524 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	d108      	bne.n	80022ea <HAL_UART_Transmit+0x7e>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e003      	b.n	80022f2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022f2:	e02d      	b.n	8002350 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fbf9 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e03d      	b.n	800238a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002320:	b292      	uxth	r2, r2
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	3302      	adds	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e008      	b.n	800233e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b292      	uxth	r2, r2
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1cb      	bne.n	80022f4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fbc5 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e009      	b.n	800238a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002394:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002398:	b088      	sub	sp, #32
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4bbc      	ldr	r3, [pc, #752]	; (80026bc <UART_SetConfig+0x328>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	69f9      	ldr	r1, [r7, #28]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4ab2      	ldr	r2, [pc, #712]	; (80026c0 <UART_SetConfig+0x32c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	4313      	orrs	r3, r2
 8002404:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4aa9      	ldr	r2, [pc, #676]	; (80026c4 <UART_SetConfig+0x330>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d121      	bne.n	8002468 <UART_SetConfig+0xd4>
 8002424:	4ba8      	ldr	r3, [pc, #672]	; (80026c8 <UART_SetConfig+0x334>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d816      	bhi.n	8002460 <UART_SetConfig+0xcc>
 8002432:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <UART_SetConfig+0xa4>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	08002449 	.word	0x08002449
 800243c:	08002455 	.word	0x08002455
 8002440:	0800244f 	.word	0x0800244f
 8002444:	0800245b 	.word	0x0800245b
 8002448:	2301      	movs	r3, #1
 800244a:	76fb      	strb	r3, [r7, #27]
 800244c:	e072      	b.n	8002534 <UART_SetConfig+0x1a0>
 800244e:	2302      	movs	r3, #2
 8002450:	76fb      	strb	r3, [r7, #27]
 8002452:	e06f      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002454:	2304      	movs	r3, #4
 8002456:	76fb      	strb	r3, [r7, #27]
 8002458:	e06c      	b.n	8002534 <UART_SetConfig+0x1a0>
 800245a:	2308      	movs	r3, #8
 800245c:	76fb      	strb	r3, [r7, #27]
 800245e:	e069      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002460:	2310      	movs	r3, #16
 8002462:	76fb      	strb	r3, [r7, #27]
 8002464:	bf00      	nop
 8002466:	e065      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a97      	ldr	r2, [pc, #604]	; (80026cc <UART_SetConfig+0x338>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d134      	bne.n	80024dc <UART_SetConfig+0x148>
 8002472:	4b95      	ldr	r3, [pc, #596]	; (80026c8 <UART_SetConfig+0x334>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d829      	bhi.n	80024d4 <UART_SetConfig+0x140>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <UART_SetConfig+0xf4>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024bd 	.word	0x080024bd
 800248c:	080024d5 	.word	0x080024d5
 8002490:	080024d5 	.word	0x080024d5
 8002494:	080024d5 	.word	0x080024d5
 8002498:	080024c9 	.word	0x080024c9
 800249c:	080024d5 	.word	0x080024d5
 80024a0:	080024d5 	.word	0x080024d5
 80024a4:	080024d5 	.word	0x080024d5
 80024a8:	080024c3 	.word	0x080024c3
 80024ac:	080024d5 	.word	0x080024d5
 80024b0:	080024d5 	.word	0x080024d5
 80024b4:	080024d5 	.word	0x080024d5
 80024b8:	080024cf 	.word	0x080024cf
 80024bc:	2300      	movs	r3, #0
 80024be:	76fb      	strb	r3, [r7, #27]
 80024c0:	e038      	b.n	8002534 <UART_SetConfig+0x1a0>
 80024c2:	2302      	movs	r3, #2
 80024c4:	76fb      	strb	r3, [r7, #27]
 80024c6:	e035      	b.n	8002534 <UART_SetConfig+0x1a0>
 80024c8:	2304      	movs	r3, #4
 80024ca:	76fb      	strb	r3, [r7, #27]
 80024cc:	e032      	b.n	8002534 <UART_SetConfig+0x1a0>
 80024ce:	2308      	movs	r3, #8
 80024d0:	76fb      	strb	r3, [r7, #27]
 80024d2:	e02f      	b.n	8002534 <UART_SetConfig+0x1a0>
 80024d4:	2310      	movs	r3, #16
 80024d6:	76fb      	strb	r3, [r7, #27]
 80024d8:	bf00      	nop
 80024da:	e02b      	b.n	8002534 <UART_SetConfig+0x1a0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <UART_SetConfig+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d124      	bne.n	8002530 <UART_SetConfig+0x19c>
 80024e6:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <UART_SetConfig+0x334>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f4:	d012      	beq.n	800251c <UART_SetConfig+0x188>
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fa:	d802      	bhi.n	8002502 <UART_SetConfig+0x16e>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <UART_SetConfig+0x17c>
 8002500:	e012      	b.n	8002528 <UART_SetConfig+0x194>
 8002502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002506:	d006      	beq.n	8002516 <UART_SetConfig+0x182>
 8002508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800250c:	d009      	beq.n	8002522 <UART_SetConfig+0x18e>
 800250e:	e00b      	b.n	8002528 <UART_SetConfig+0x194>
 8002510:	2300      	movs	r3, #0
 8002512:	76fb      	strb	r3, [r7, #27]
 8002514:	e00e      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002516:	2302      	movs	r3, #2
 8002518:	76fb      	strb	r3, [r7, #27]
 800251a:	e00b      	b.n	8002534 <UART_SetConfig+0x1a0>
 800251c:	2304      	movs	r3, #4
 800251e:	76fb      	strb	r3, [r7, #27]
 8002520:	e008      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002522:	2308      	movs	r3, #8
 8002524:	76fb      	strb	r3, [r7, #27]
 8002526:	e005      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002528:	2310      	movs	r3, #16
 800252a:	76fb      	strb	r3, [r7, #27]
 800252c:	bf00      	nop
 800252e:	e001      	b.n	8002534 <UART_SetConfig+0x1a0>
 8002530:	2310      	movs	r3, #16
 8002532:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a61      	ldr	r2, [pc, #388]	; (80026c0 <UART_SetConfig+0x32c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	f040 80f4 	bne.w	8002728 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002540:	7efb      	ldrb	r3, [r7, #27]
 8002542:	2b08      	cmp	r3, #8
 8002544:	d823      	bhi.n	800258e <UART_SetConfig+0x1fa>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <UART_SetConfig+0x1b8>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	08002571 	.word	0x08002571
 8002550:	0800258f 	.word	0x0800258f
 8002554:	08002579 	.word	0x08002579
 8002558:	0800258f 	.word	0x0800258f
 800255c:	0800257f 	.word	0x0800257f
 8002560:	0800258f 	.word	0x0800258f
 8002564:	0800258f 	.word	0x0800258f
 8002568:	0800258f 	.word	0x0800258f
 800256c:	08002587 	.word	0x08002587
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002570:	f7ff f854 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002574:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002576:	e00d      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002578:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <UART_SetConfig+0x33c>)
 800257a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800257c:	e00a      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800257e:	f7fe ffb7 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8002582:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002584:	e006      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800258c:	e002      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	74fb      	strb	r3, [r7, #19]
        break;
 8002592:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 81b9 	beq.w	800290e <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d305      	bcc.n	80025b8 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d902      	bls.n	80025be <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	74fb      	strb	r3, [r7, #19]
 80025bc:	e1a7      	b.n	800290e <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 80025be:	7efb      	ldrb	r3, [r7, #27]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	f200 809e 	bhi.w	8002702 <UART_SetConfig+0x36e>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <UART_SetConfig+0x238>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	08002703 	.word	0x08002703
 80025d4:	0800263d 	.word	0x0800263d
 80025d8:	08002703 	.word	0x08002703
 80025dc:	08002671 	.word	0x08002671
 80025e0:	08002703 	.word	0x08002703
 80025e4:	08002703 	.word	0x08002703
 80025e8:	08002703 	.word	0x08002703
 80025ec:	080026d9 	.word	0x080026d9
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025f0:	f7ff f814 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	0214      	lsls	r4, r2, #8
 8002606:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800260a:	020b      	lsls	r3, r1, #8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6852      	ldr	r2, [r2, #4]
 8002610:	0852      	lsrs	r2, r2, #1
 8002612:	4611      	mov	r1, r2
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	eb13 0b01 	adds.w	fp, r3, r1
 800261c:	eb44 0c02 	adc.w	ip, r4, r2
 8002620:	4658      	mov	r0, fp
 8002622:	4661      	mov	r1, ip
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	f7fd fdce 	bl	80001d0 <__aeabi_uldivmod>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800263a:	e065      	b.n	8002708 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	f04f 0400 	mov.w	r4, #0
 8002646:	4923      	ldr	r1, [pc, #140]	; (80026d4 <UART_SetConfig+0x340>)
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	eb13 0b01 	adds.w	fp, r3, r1
 8002650:	eb44 0c02 	adc.w	ip, r4, r2
 8002654:	4658      	mov	r0, fp
 8002656:	4661      	mov	r1, ip
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	461a      	mov	r2, r3
 8002662:	4623      	mov	r3, r4
 8002664:	f7fd fdb4 	bl	80001d0 <__aeabi_uldivmod>
 8002668:	4603      	mov	r3, r0
 800266a:	460c      	mov	r4, r1
 800266c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800266e:	e04b      	b.n	8002708 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002670:	f7fe ff3e 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	f04f 0400 	mov.w	r4, #0
 8002684:	0214      	lsls	r4, r2, #8
 8002686:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800268a:	020b      	lsls	r3, r1, #8
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6852      	ldr	r2, [r2, #4]
 8002690:	0852      	lsrs	r2, r2, #1
 8002692:	4611      	mov	r1, r2
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	eb13 0b01 	adds.w	fp, r3, r1
 800269c:	eb44 0c02 	adc.w	ip, r4, r2
 80026a0:	4658      	mov	r0, fp
 80026a2:	4661      	mov	r1, ip
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	f7fd fd8e 	bl	80001d0 <__aeabi_uldivmod>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80026ba:	e025      	b.n	8002708 <UART_SetConfig+0x374>
 80026bc:	efff69f3 	.word	0xefff69f3
 80026c0:	40008000 	.word	0x40008000
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40004400 	.word	0x40004400
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	f04f 0400 	mov.w	r4, #0
 80026e2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80026e6:	f144 0100 	adc.w	r1, r4, #0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fd fd6b 	bl	80001d0 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002700:	e002      	b.n	8002708 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	74fb      	strb	r3, [r7, #19]
            break;
 8002706:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270e:	d308      	bcc.n	8002722 <UART_SetConfig+0x38e>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	d204      	bcs.n	8002722 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e0f5      	b.n	800290e <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	74fb      	strb	r3, [r7, #19]
 8002726:	e0f2      	b.n	800290e <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002730:	d17f      	bne.n	8002832 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 8002732:	7efb      	ldrb	r3, [r7, #27]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d85c      	bhi.n	80027f2 <UART_SetConfig+0x45e>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <UART_SetConfig+0x3ac>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002765 	.word	0x08002765
 8002744:	08002783 	.word	0x08002783
 8002748:	080027a1 	.word	0x080027a1
 800274c:	080027f3 	.word	0x080027f3
 8002750:	080027bd 	.word	0x080027bd
 8002754:	080027f3 	.word	0x080027f3
 8002758:	080027f3 	.word	0x080027f3
 800275c:	080027f3 	.word	0x080027f3
 8002760:	080027db 	.word	0x080027db
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002764:	f7fe ff5a 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002768:	4603      	mov	r3, r0
 800276a:	005a      	lsls	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	441a      	add	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002780:	e03a      	b.n	80027f8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002782:	f7fe ff61 	bl	8001648 <HAL_RCC_GetPCLK2Freq>
 8002786:	4603      	mov	r3, r0
 8002788:	005a      	lsls	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	441a      	add	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	b29b      	uxth	r3, r3
 800279c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800279e:	e02b      	b.n	80027f8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80027aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6852      	ldr	r2, [r2, #4]
 80027b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027ba:	e01d      	b.n	80027f8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027bc:	f7fe fe98 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80027c0:	4603      	mov	r3, r0
 80027c2:	005a      	lsls	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027d8:	e00e      	b.n	80027f8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027f0:	e002      	b.n	80027f8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	74fb      	strb	r3, [r7, #19]
        break;
 80027f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	d916      	bls.n	800282c <UART_SetConfig+0x498>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d212      	bcs.n	800282c <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b29a      	uxth	r2, r3
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	4313      	orrs	r3, r2
 8002820:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	897a      	ldrh	r2, [r7, #10]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e070      	b.n	800290e <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	74fb      	strb	r3, [r7, #19]
 8002830:	e06d      	b.n	800290e <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 8002832:	7efb      	ldrb	r3, [r7, #27]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d859      	bhi.n	80028ec <UART_SetConfig+0x558>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <UART_SetConfig+0x4ac>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002865 	.word	0x08002865
 8002844:	08002881 	.word	0x08002881
 8002848:	0800289d 	.word	0x0800289d
 800284c:	080028ed 	.word	0x080028ed
 8002850:	080028b9 	.word	0x080028b9
 8002854:	080028ed 	.word	0x080028ed
 8002858:	080028ed 	.word	0x080028ed
 800285c:	080028ed 	.word	0x080028ed
 8002860:	080028d5 	.word	0x080028d5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002864:	f7fe feda 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	b29b      	uxth	r3, r3
 800287c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800287e:	e038      	b.n	80028f2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002880:	f7fe fee2 	bl	8001648 <HAL_RCC_GetPCLK2Freq>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800289a:	e02a      	b.n	80028f2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6852      	ldr	r2, [r2, #4]
 80028ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028b6:	e01c      	b.n	80028f2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028b8:	f7fe fe1a 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028d2:	e00e      	b.n	80028f2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028ea:	e002      	b.n	80028f2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	74fb      	strb	r3, [r7, #19]
        break;
 80028f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d908      	bls.n	800290a <UART_SetConfig+0x576>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d204      	bcs.n	800290a <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	e001      	b.n	800290e <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800291a:	7cfb      	ldrb	r3, [r7, #19]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002926:	bf00      	nop

08002928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a26:	d10a      	bne.n	8002a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  }
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a7a:	f7fd fd53 	bl	8000524 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d10e      	bne.n	8002aac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f82a 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e020      	b.n	8002aee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d10e      	bne.n	8002ad8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f814 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e00a      	b.n	8002aee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b06:	e02a      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d026      	beq.n	8002b5e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fd fd08 	bl	8000524 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11b      	bne.n	8002b5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e00f      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d0c5      	beq.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b98:	2b84      	cmp	r3, #132	; 0x84
 8002b9a:	d005      	beq.n	8002ba8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bba:	f000 fe53 	bl	8003864 <vTaskStartScheduler>
  
  return osOK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685c      	ldr	r4, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bda:	b29e      	uxth	r6, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffcf 	bl	8002b86 <makeFreeRtosPriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	9200      	str	r2, [sp, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f000 fcd5 	bl	80035a8 <xTaskCreate>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d001      	beq.n	8002c08 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002c08:	68fb      	ldr	r3, [r7, #12]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <osDelay+0x16>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	e000      	b.n	8002c2a <osDelay+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fde6 	bl	80037fc <vTaskDelay>
  
  return osOK;
 8002c30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002c42:	2001      	movs	r0, #1
 8002c44:	f000 f994 	bl	8002f70 <xQueueCreateMutex>
 8002c48:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f103 0208 	add.w	r2, r3, #8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0208 	add.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d103      	bne.n	8002d14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e00c      	b.n	8002d2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3308      	adds	r3, #8
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e002      	b.n	8002d22 <vListInsert+0x2e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d2f6      	bcs.n	8002d1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6892      	ldr	r2, [r2, #8]
 8002d7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6852      	ldr	r2, [r2, #4]
 8002d86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d103      	bne.n	8002d9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	e7fe      	b.n	8002de2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002de4:	f001 fd6a 	bl	80048bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	441a      	add	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	3b01      	subs	r3, #1
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	441a      	add	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	22ff      	movs	r2, #255	; 0xff
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d114      	bne.n	8002e64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01a      	beq.n	8002e78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3310      	adds	r3, #16
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 ff36 	bl	8003cb8 <xTaskRemoveFromEventList>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <xQueueGenericReset+0xcc>)
 8002e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	e009      	b.n	8002e78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3310      	adds	r3, #16
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fef2 	bl	8002c52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3324      	adds	r3, #36	; 0x24
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff feed 	bl	8002c52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e78:	f001 fd4e 	bl	8004918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <xQueueGenericCreate+0x28>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e7fe      	b.n	8002eb2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e004      	b.n	8002eca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3348      	adds	r3, #72	; 0x48
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 fdd0 	bl	8004a74 <pvPortMalloc>
 8002ed4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3348      	adds	r3, #72	; 0x48
 8002ee0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f805 	bl	8002efe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e002      	b.n	8002f20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	69b8      	ldr	r0, [r7, #24]
 8002f30:	f7ff ff44 	bl	8002dbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f81c 	bl	8002fa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6939      	ldr	r1, [r7, #16]
 8002f88:	6978      	ldr	r0, [r7, #20]
 8002f8a:	f7ff ff7f 	bl	8002e8c <xQueueGenericCreate>
 8002f8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ffd3 	bl	8002f3c <prvInitialiseMutex>

		return pxNewQueue;
 8002f96:	68fb      	ldr	r3, [r7, #12]
	}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	; 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <xQueueGenericSend+0x30>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	e7fe      	b.n	8002fce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x3e>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <xQueueGenericSend+0x42>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueGenericSend+0x44>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <xQueueGenericSend+0x5c>
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x6a>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <xQueueGenericSend+0x6e>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSend+0x70>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <xQueueGenericSend+0x88>
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	e7fe      	b.n	8003026 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003028:	f000 ffe4 	bl	8003ff4 <xTaskGetSchedulerState>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <xQueueGenericSend+0x98>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <xQueueGenericSend+0x9c>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <xQueueGenericSend+0x9e>
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <xQueueGenericSend+0xb6>
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e7fe      	b.n	8003054 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003056:	f001 fc31 	bl	80048bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <xQueueGenericSend+0xcc>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d129      	bne.n	80030c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003072:	f000 f9af 	bl	80033d4 <prvCopyDataToQueue>
 8003076:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	3324      	adds	r3, #36	; 0x24
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fe17 	bl	8003cb8 <xTaskRemoveFromEventList>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <xQueueGenericSend+0x1f0>)
 8003092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	e00a      	b.n	80030b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <xQueueGenericSend+0x1f0>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030b8:	f001 fc2e 	bl	8004918 <vPortExitCritical>
				return pdPASS;
 80030bc:	2301      	movs	r3, #1
 80030be:	e063      	b.n	8003188 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030c6:	f001 fc27 	bl	8004918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e05c      	b.n	8003188 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fe4f 	bl	8003d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030de:	2301      	movs	r3, #1
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e2:	f001 fc19 	bl	8004918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030e6:	f000 fc03 	bl	80038f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ea:	f001 fbe7 	bl	80048bc <vPortEnterCritical>
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d103      	bne.n	8003104 <xQueueGenericSend+0x164>
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310a:	b25b      	sxtb	r3, r3
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d103      	bne.n	800311a <xQueueGenericSend+0x17a>
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800311a:	f001 fbfd 	bl	8004918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800311e:	1d3a      	adds	r2, r7, #4
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe3e 	bl	8003da8 <xTaskCheckForTimeOut>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d124      	bne.n	800317c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003134:	f000 fa20 	bl	8003578 <prvIsQueueFull>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d018      	beq.n	8003170 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	3310      	adds	r3, #16
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd92 	bl	8003c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800314c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800314e:	f000 f9ab 	bl	80034a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003152:	f000 fbdb 	bl	800390c <xTaskResumeAll>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f af7c 	bne.w	8003056 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <xQueueGenericSend+0x1f0>)
 8003160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	e772      	b.n	8003056 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003172:	f000 f999 	bl	80034a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003176:	f000 fbc9 	bl	800390c <xTaskResumeAll>
 800317a:	e76c      	b.n	8003056 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800317c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800317e:	f000 f993 	bl	80034a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003182:	f000 fbc3 	bl	800390c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003186:	2300      	movs	r3, #0
		}
	}
}
 8003188:	4618      	mov	r0, r3
 800318a:	3738      	adds	r7, #56	; 0x38
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <xQueueSemaphoreTake+0x30>
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	e7fe      	b.n	80031c2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <xQueueSemaphoreTake+0x4c>
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e7fe      	b.n	80031de <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031e0:	f000 ff08 	bl	8003ff4 <xTaskGetSchedulerState>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <xQueueSemaphoreTake+0x5c>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <xQueueSemaphoreTake+0x60>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <xQueueSemaphoreTake+0x62>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <xQueueSemaphoreTake+0x7a>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e7fe      	b.n	800320c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800320e:	f001 fb55 	bl	80048bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d024      	beq.n	8003268 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800322e:	f001 f8a7 	bl	8004380 <pvTaskIncrementMutexHeldCount>
 8003232:	4602      	mov	r2, r0
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	3310      	adds	r3, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fd37 	bl	8003cb8 <xTaskRemoveFromEventList>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <xQueueSemaphoreTake+0x20c>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003260:	f001 fb5a 	bl	8004918 <vPortExitCritical>
				return pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	e096      	b.n	8003396 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d110      	bne.n	8003290 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <xQueueSemaphoreTake+0xf4>
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e7fe      	b.n	8003286 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003288:	f001 fb46 	bl	8004918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800328c:	2300      	movs	r3, #0
 800328e:	e082      	b.n	8003396 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fd6e 	bl	8003d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032a4:	f001 fb38 	bl	8004918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a8:	f000 fb22 	bl	80038f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ac:	f001 fb06 	bl	80048bc <vPortEnterCritical>
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <xQueueSemaphoreTake+0x132>
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d103      	bne.n	80032dc <xQueueSemaphoreTake+0x148>
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	f001 fb1c 	bl	8004918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032e0:	463a      	mov	r2, r7
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd5d 	bl	8003da8 <xTaskCheckForTimeOut>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d132      	bne.n	800335a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f6:	f000 f929 	bl	800354c <prvIsQueueEmpty>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d026      	beq.n	800334e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003308:	f001 fad8 	bl	80048bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fe8d 	bl	8004030 <xTaskPriorityInherit>
 8003316:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003318:	f001 fafe 	bl	8004918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fca3 	bl	8003c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800332a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800332c:	f000 f8bc 	bl	80034a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003330:	f000 faec 	bl	800390c <xTaskResumeAll>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f af69 	bne.w	800320e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <xQueueSemaphoreTake+0x20c>)
 800333e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	e75f      	b.n	800320e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800334e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003350:	f000 f8aa 	bl	80034a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003354:	f000 fada 	bl	800390c <xTaskResumeAll>
 8003358:	e759      	b.n	800320e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800335a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800335c:	f000 f8a4 	bl	80034a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003360:	f000 fad4 	bl	800390c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003366:	f000 f8f1 	bl	800354c <prvIsQueueEmpty>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f43f af4e 	beq.w	800320e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003378:	f001 faa0 	bl	80048bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800337c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800337e:	f000 f811 	bl	80033a4 <prvGetDisinheritPriorityAfterTimeout>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f000 ff5a 	bl	8004244 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003390:	f001 fac2 	bl	8004918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003396:	4618      	mov	r0, r3
 8003398:	3738      	adds	r7, #56	; 0x38
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e001      	b.n	80033c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80033c6:	68fb      	ldr	r3, [r7, #12]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d14d      	bne.n	8003496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fe9c 	bl	800413c <xTaskPriorityDisinherit>
 8003404:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e043      	b.n	8003496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d119      	bne.n	8003448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6898      	ldr	r0, [r3, #8]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	461a      	mov	r2, r3
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	f002 f8b0 	bl	8005584 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d32b      	bcc.n	8003496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	e026      	b.n	8003496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68d8      	ldr	r0, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	461a      	mov	r2, r3
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	f002 f896 	bl	8005584 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	425b      	negs	r3, r3
 8003462:	441a      	add	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	425b      	negs	r3, r3
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d105      	bne.n	8003496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3b01      	subs	r3, #1
 8003494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800349e:	697b      	ldr	r3, [r7, #20]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034b0:	f001 fa04 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034bc:	e011      	b.n	80034e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3324      	adds	r3, #36	; 0x24
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fbf4 	bl	8003cb8 <xTaskRemoveFromEventList>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034d6:	f000 fcc7 	bl	8003e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	dce9      	bgt.n	80034be <prvUnlockQueue+0x16>
 80034ea:	e000      	b.n	80034ee <prvUnlockQueue+0x46>
					break;
 80034ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034f6:	f001 fa0f 	bl	8004918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034fa:	f001 f9df 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003506:	e011      	b.n	800352c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3310      	adds	r3, #16
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fbcf 	bl	8003cb8 <xTaskRemoveFromEventList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003520:	f000 fca2 	bl	8003e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003524:	7bbb      	ldrb	r3, [r7, #14]
 8003526:	3b01      	subs	r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800352c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003530:	2b00      	cmp	r3, #0
 8003532:	dce9      	bgt.n	8003508 <prvUnlockQueue+0x60>
 8003534:	e000      	b.n	8003538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003540:	f001 f9ea 	bl	8004918 <vPortExitCritical>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003554:	f001 f9b2 	bl	80048bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e001      	b.n	800356a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356a:	f001 f9d5 	bl	8004918 <vPortExitCritical>

	return xReturn;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003580:	f001 f99c 	bl	80048bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	429a      	cmp	r2, r3
 800358e:	d102      	bne.n	8003596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e001      	b.n	800359a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800359a:	f001 f9bd 	bl	8004918 <vPortExitCritical>

	return xReturn;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af04      	add	r7, sp, #16
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fa59 	bl	8004a74 <pvPortMalloc>
 80035c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00e      	beq.n	80035e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035ca:	2054      	movs	r0, #84	; 0x54
 80035cc:	f001 fa52 	bl	8004a74 <pvPortMalloc>
 80035d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
 80035de:	e005      	b.n	80035ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035e0:	6978      	ldr	r0, [r7, #20]
 80035e2:	f001 fb09 	bl	8004bf8 <vPortFree>
 80035e6:	e001      	b.n	80035ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d013      	beq.n	800361a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	2300      	movs	r3, #0
 80035f6:	9303      	str	r3, [sp, #12]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f80e 	bl	800362a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360e:	69f8      	ldr	r0, [r7, #28]
 8003610:	f000 f88a 	bl	8003728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e002      	b.n	8003620 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003620:	69bb      	ldr	r3, [r7, #24]
	}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b088      	sub	sp, #32
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003642:	3b01      	subs	r3, #1
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f023 0307 	bic.w	r3, r3, #7
 8003650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <prvInitialiseNewTask+0x46>
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e7fe      	b.n	800366e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e012      	b.n	800369c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	7819      	ldrb	r1, [r3, #0]
 800367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	3334      	adds	r3, #52	; 0x34
 8003686:	460a      	mov	r2, r1
 8003688:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d9e9      	bls.n	8003676 <prvInitialiseNewTask+0x4c>
 80036a2:	e000      	b.n	80036a6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80036a4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d901      	bls.n	80036b8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036b4:	2306      	movs	r3, #6
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fadf 	bl	8002c92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	3318      	adds	r3, #24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fada 	bl	8002c92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	f1c3 0207 	rsb	r2, r3, #7
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	2200      	movs	r2, #0
 80036f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	69b8      	ldr	r0, [r7, #24]
 8003708:	f000 ffae 	bl	8004668 <pxPortInitialiseStack>
 800370c:	4602      	mov	r2, r0
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800371e:	bf00      	nop
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003730:	f001 f8c4 	bl	80048bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <prvAddNewTaskToReadyList+0xb8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <prvAddNewTaskToReadyList+0xb8>)
 800373c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800373e:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <prvAddNewTaskToReadyList+0xbc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003746:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <prvAddNewTaskToReadyList+0xbc>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <prvAddNewTaskToReadyList+0xb8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d110      	bne.n	8003776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003754:	f000 fbac 	bl	8003eb0 <prvInitialiseTaskLists>
 8003758:	e00d      	b.n	8003776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <prvAddNewTaskToReadyList+0xc0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <prvAddNewTaskToReadyList+0xbc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	429a      	cmp	r2, r3
 800376e:	d802      	bhi.n	8003776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <prvAddNewTaskToReadyList+0xbc>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <prvAddNewTaskToReadyList+0xc4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <prvAddNewTaskToReadyList+0xc4>)
 800377e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <prvAddNewTaskToReadyList+0xc8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <prvAddNewTaskToReadyList+0xc8>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <prvAddNewTaskToReadyList+0xcc>)
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7ff fa7f 	bl	8002cac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 f8b3 	bl	8004918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <prvAddNewTaskToReadyList+0xc0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00e      	beq.n	80037d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvAddNewTaskToReadyList+0xbc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <prvAddNewTaskToReadyList+0xd0>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	2000012c 	.word	0x2000012c
 80037e4:	2000002c 	.word	0x2000002c
 80037e8:	20000138 	.word	0x20000138
 80037ec:	20000148 	.word	0x20000148
 80037f0:	20000134 	.word	0x20000134
 80037f4:	20000030 	.word	0x20000030
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <vTaskDelay+0x60>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <vTaskDelay+0x2e>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	e7fe      	b.n	8003828 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800382a:	f000 f861 	bl	80038f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800382e:	2100      	movs	r1, #0
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 feb3 	bl	800459c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003836:	f000 f869 	bl	800390c <xTaskResumeAll>
 800383a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <vTaskDelay+0x64>)
 8003844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000154 	.word	0x20000154
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <vTaskStartScheduler+0x74>)
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	2300      	movs	r3, #0
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2300      	movs	r3, #0
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	4919      	ldr	r1, [pc, #100]	; (80038dc <vTaskStartScheduler+0x78>)
 8003878:	4819      	ldr	r0, [pc, #100]	; (80038e0 <vTaskStartScheduler+0x7c>)
 800387a:	f7ff fe95 	bl	80035a8 <xTaskCreate>
 800387e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d115      	bne.n	80038b2 <vTaskStartScheduler+0x4e>
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <vTaskStartScheduler+0x80>)
 800389a:	f04f 32ff 	mov.w	r2, #4294967295
 800389e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <vTaskStartScheduler+0x84>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <vTaskStartScheduler+0x88>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038ac:	f000 ff68 	bl	8004780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038b0:	e00d      	b.n	80038ce <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d109      	bne.n	80038ce <vTaskStartScheduler+0x6a>
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e7fe      	b.n	80038cc <vTaskStartScheduler+0x68>
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000150 	.word	0x20000150
 80038dc:	080055c4 	.word	0x080055c4
 80038e0:	08003e81 	.word	0x08003e81
 80038e4:	2000014c 	.word	0x2000014c
 80038e8:	20000138 	.word	0x20000138
 80038ec:	20000130 	.word	0x20000130

080038f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <vTaskSuspendAll+0x18>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a03      	ldr	r2, [pc, #12]	; (8003908 <vTaskSuspendAll+0x18>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20000154 	.word	0x20000154

0800390c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <xTaskResumeAll+0x114>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <xTaskResumeAll+0x2a>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	e7fe      	b.n	8003934 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003936:	f000 ffc1 	bl	80048bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <xTaskResumeAll+0x114>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a37      	ldr	r2, [pc, #220]	; (8003a20 <xTaskResumeAll+0x114>)
 8003942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <xTaskResumeAll+0x114>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d161      	bne.n	8003a10 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <xTaskResumeAll+0x118>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05d      	beq.n	8003a10 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003954:	e02e      	b.n	80039b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <xTaskResumeAll+0x11c>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3318      	adds	r3, #24
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f9ff 	bl	8002d66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f9fa 	bl	8002d66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	2201      	movs	r2, #1
 8003978:	409a      	lsls	r2, r3
 800397a:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <xTaskResumeAll+0x120>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <xTaskResumeAll+0x120>)
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4a27      	ldr	r2, [pc, #156]	; (8003a30 <xTaskResumeAll+0x124>)
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff f986 	bl	8002cac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <xTaskResumeAll+0x128>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <xTaskResumeAll+0x11c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1cc      	bne.n	8003956 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c2:	f000 faf1 	bl	8003fa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <xTaskResumeAll+0x130>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d2:	f000 f837 	bl	8003a44 <xTaskIncrementTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f1      	bne.n	80039d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <xTaskResumeAll+0x130>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <xTaskResumeAll+0x134>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a10:	f000 ff82 	bl	8004918 <vPortExitCritical>

	return xAlreadyYielded;
 8003a14:	68bb      	ldr	r3, [r7, #8]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000154 	.word	0x20000154
 8003a24:	2000012c 	.word	0x2000012c
 8003a28:	200000ec 	.word	0x200000ec
 8003a2c:	20000134 	.word	0x20000134
 8003a30:	20000030 	.word	0x20000030
 8003a34:	2000002c 	.word	0x2000002c
 8003a38:	20000140 	.word	0x20000140
 8003a3c:	2000013c 	.word	0x2000013c
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <xTaskIncrementTick+0x14c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 808c 	bne.w	8003b70 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a58:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <xTaskIncrementTick+0x150>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a60:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <xTaskIncrementTick+0x150>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11f      	bne.n	8003aac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <xTaskIncrementTick+0x46>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	e7fe      	b.n	8003a88 <xTaskIncrementTick+0x44>
 8003a8a:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <xTaskIncrementTick+0x158>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <xTaskIncrementTick+0x158>)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <xTaskIncrementTick+0x15c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <xTaskIncrementTick+0x15c>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	f000 fa7e 	bl	8003fa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aac:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d34d      	bcc.n	8003b52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <xTaskIncrementTick+0x80>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <xTaskIncrementTick+0x82>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	601a      	str	r2, [r3, #0]
					break;
 8003ad2:	e03e      	b.n	8003b52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ad4:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <xTaskIncrementTick+0x154>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d203      	bcs.n	8003af4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003aec:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <xTaskIncrementTick+0x160>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
						break;
 8003af2:	e02e      	b.n	8003b52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f934 	bl	8002d66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3318      	adds	r3, #24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f92b 	bl	8002d66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <xTaskIncrementTick+0x164>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <xTaskIncrementTick+0x164>)
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <xTaskIncrementTick+0x168>)
 8003b30:	441a      	add	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7ff f8b7 	bl	8002cac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3b4      	bcc.n	8003ab6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b50:	e7b1      	b.n	8003ab6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4914      	ldr	r1, [pc, #80]	; (8003bac <xTaskIncrementTick+0x168>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d907      	bls.n	8003b7a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e004      	b.n	8003b7a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <xTaskIncrementTick+0x170>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <xTaskIncrementTick+0x170>)
 8003b78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <xTaskIncrementTick+0x174>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000154 	.word	0x20000154
 8003b94:	20000130 	.word	0x20000130
 8003b98:	200000e4 	.word	0x200000e4
 8003b9c:	200000e8 	.word	0x200000e8
 8003ba0:	20000144 	.word	0x20000144
 8003ba4:	2000014c 	.word	0x2000014c
 8003ba8:	20000134 	.word	0x20000134
 8003bac:	20000030 	.word	0x20000030
 8003bb0:	2000002c 	.word	0x2000002c
 8003bb4:	2000013c 	.word	0x2000013c
 8003bb8:	20000140 	.word	0x20000140

08003bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <vTaskSwitchContext+0xa0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <vTaskSwitchContext+0xa4>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bd0:	e03e      	b.n	8003c50 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <vTaskSwitchContext+0xa4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <vTaskSwitchContext+0xa8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f1c3 031f 	rsb	r3, r3, #31
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	491e      	ldr	r1, [pc, #120]	; (8003c68 <vTaskSwitchContext+0xac>)
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	e7fe      	b.n	8003c14 <vTaskSwitchContext+0x58>
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <vTaskSwitchContext+0xac>)
 8003c22:	4413      	add	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	3308      	adds	r3, #8
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d104      	bne.n	8003c46 <vTaskSwitchContext+0x8a>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <vTaskSwitchContext+0xb0>)
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20000154 	.word	0x20000154
 8003c60:	20000140 	.word	0x20000140
 8003c64:	20000134 	.word	0x20000134
 8003c68:	20000030 	.word	0x20000030
 8003c6c:	2000002c 	.word	0x2000002c

08003c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <vTaskPlaceOnEventList+0x24>
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e7fe      	b.n	8003c92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vTaskPlaceOnEventList+0x44>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3318      	adds	r3, #24
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff f829 	bl	8002cf4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f000 fc79 	bl	800459c <prvAddCurrentTaskToDelayedList>
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000002c 	.word	0x2000002c

08003cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <xTaskRemoveFromEventList+0x2a>
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e7fe      	b.n	8003ce0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f83d 	bl	8002d66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <xTaskRemoveFromEventList+0xac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11c      	bne.n	8003d2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff f834 	bl	8002d66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <xTaskRemoveFromEventList+0xb0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <xTaskRemoveFromEventList+0xb0>)
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <xTaskRemoveFromEventList+0xb4>)
 8003d1e:	441a      	add	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fe ffc0 	bl	8002cac <vListInsertEnd>
 8003d2c:	e005      	b.n	8003d3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	3318      	adds	r3, #24
 8003d32:	4619      	mov	r1, r3
 8003d34:	480e      	ldr	r0, [pc, #56]	; (8003d70 <xTaskRemoveFromEventList+0xb8>)
 8003d36:	f7fe ffb9 	bl	8002cac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <xTaskRemoveFromEventList+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d905      	bls.n	8003d54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <xTaskRemoveFromEventList+0xc0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e001      	b.n	8003d58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d58:	697b      	ldr	r3, [r7, #20]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000154 	.word	0x20000154
 8003d68:	20000134 	.word	0x20000134
 8003d6c:	20000030 	.word	0x20000030
 8003d70:	200000ec 	.word	0x200000ec
 8003d74:	2000002c 	.word	0x2000002c
 8003d78:	20000140 	.word	0x20000140

08003d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <vTaskInternalSetTimeOutState+0x24>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <vTaskInternalSetTimeOutState+0x28>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	605a      	str	r2, [r3, #4]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	20000144 	.word	0x20000144
 8003da4:	20000130 	.word	0x20000130

08003da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <xTaskCheckForTimeOut+0x24>
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e7fe      	b.n	8003dca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <xTaskCheckForTimeOut+0x3e>
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e7fe      	b.n	8003de4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003de6:	f000 fd69 	bl	80048bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <xTaskCheckForTimeOut+0xb8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d102      	bne.n	8003e0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e023      	b.n	8003e52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <xTaskCheckForTimeOut+0xbc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d007      	beq.n	8003e26 <xTaskCheckForTimeOut+0x7e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e015      	b.n	8003e52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d20b      	bcs.n	8003e48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff9d 	bl	8003d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e004      	b.n	8003e52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e52:	f000 fd61 	bl	8004918 <vPortExitCritical>

	return xReturn;
 8003e56:	69fb      	ldr	r3, [r7, #28]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000130 	.word	0x20000130
 8003e64:	20000144 	.word	0x20000144

08003e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <vTaskMissedYield+0x14>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000140 	.word	0x20000140

08003e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e88:	f000 f852 	bl	8003f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <prvIdleTask+0x28>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d9f9      	bls.n	8003e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <prvIdleTask+0x2c>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ea4:	e7f0      	b.n	8003e88 <prvIdleTask+0x8>
 8003ea6:	bf00      	nop
 8003ea8:	20000030 	.word	0x20000030
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	e00c      	b.n	8003ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <prvInitialiseTaskLists+0x60>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fec1 	bl	8002c52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d9ef      	bls.n	8003ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <prvInitialiseTaskLists+0x64>)
 8003ede:	f7fe feb8 	bl	8002c52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ee2:	480d      	ldr	r0, [pc, #52]	; (8003f18 <prvInitialiseTaskLists+0x68>)
 8003ee4:	f7fe feb5 	bl	8002c52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee8:	480c      	ldr	r0, [pc, #48]	; (8003f1c <prvInitialiseTaskLists+0x6c>)
 8003eea:	f7fe feb2 	bl	8002c52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eee:	480c      	ldr	r0, [pc, #48]	; (8003f20 <prvInitialiseTaskLists+0x70>)
 8003ef0:	f7fe feaf 	bl	8002c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ef4:	480b      	ldr	r0, [pc, #44]	; (8003f24 <prvInitialiseTaskLists+0x74>)
 8003ef6:	f7fe feac 	bl	8002c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <prvInitialiseTaskLists+0x78>)
 8003efc:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <prvInitialiseTaskLists+0x64>)
 8003efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <prvInitialiseTaskLists+0x7c>)
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <prvInitialiseTaskLists+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000030 	.word	0x20000030
 8003f14:	200000bc 	.word	0x200000bc
 8003f18:	200000d0 	.word	0x200000d0
 8003f1c:	200000ec 	.word	0x200000ec
 8003f20:	20000100 	.word	0x20000100
 8003f24:	20000118 	.word	0x20000118
 8003f28:	200000e4 	.word	0x200000e4
 8003f2c:	200000e8 	.word	0x200000e8

08003f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f36:	e019      	b.n	8003f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f38:	f000 fcc0 	bl	80048bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvCheckTasksWaitingTermination+0x4c>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe ff0c 	bl	8002d66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <prvCheckTasksWaitingTermination+0x50>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <prvCheckTasksWaitingTermination+0x50>)
 8003f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <prvCheckTasksWaitingTermination+0x54>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <prvCheckTasksWaitingTermination+0x54>)
 8003f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f62:	f000 fcd9 	bl	8004918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f80e 	bl	8003f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <prvCheckTasksWaitingTermination+0x54>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e1      	bne.n	8003f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000100 	.word	0x20000100
 8003f80:	2000012c 	.word	0x2000012c
 8003f84:	20000114 	.word	0x20000114

08003f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe2f 	bl	8004bf8 <vPortFree>
			vPortFree( pxTCB );
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fe2c 	bl	8004bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <prvResetNextTaskUnblockTime+0x44>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <prvResetNextTaskUnblockTime+0x14>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <prvResetNextTaskUnblockTime+0x16>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <prvResetNextTaskUnblockTime+0x48>)
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fca:	e008      	b.n	8003fde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <prvResetNextTaskUnblockTime+0x44>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <prvResetNextTaskUnblockTime+0x48>)
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200000e4 	.word	0x200000e4
 8003ff0:	2000014c 	.word	0x2000014c

08003ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <xTaskGetSchedulerState+0x34>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004002:	2301      	movs	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	e008      	b.n	800401a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <xTaskGetSchedulerState+0x38>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004010:	2302      	movs	r3, #2
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e001      	b.n	800401a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800401a:	687b      	ldr	r3, [r7, #4]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20000138 	.word	0x20000138
 800402c:	20000154 	.word	0x20000154

08004030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d06e      	beq.n	8004124 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <xTaskPriorityInherit+0x100>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d25e      	bcs.n	8004112 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db06      	blt.n	800406a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405c:	4b34      	ldr	r3, [pc, #208]	; (8004130 <xTaskPriorityInherit+0x100>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f1c3 0207 	rsb	r2, r3, #7
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6959      	ldr	r1, [r3, #20]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <xTaskPriorityInherit+0x104>)
 800407c:	4413      	add	r3, r2
 800407e:	4299      	cmp	r1, r3
 8004080:	d101      	bne.n	8004086 <xTaskPriorityInherit+0x56>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <xTaskPriorityInherit+0x58>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03a      	beq.n	8004102 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fe68 	bl	8002d66 <uxListRemove>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d115      	bne.n	80040c8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4924      	ldr	r1, [pc, #144]	; (8004134 <xTaskPriorityInherit+0x104>)
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <xTaskPriorityInherit+0x98>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43da      	mvns	r2, r3
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <xTaskPriorityInherit+0x108>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4013      	ands	r3, r2
 80040c4:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <xTaskPriorityInherit+0x108>)
 80040c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <xTaskPriorityInherit+0x100>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	2201      	movs	r2, #1
 80040d8:	409a      	lsls	r2, r3
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <xTaskPriorityInherit+0x108>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <xTaskPriorityInherit+0x108>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4a10      	ldr	r2, [pc, #64]	; (8004134 <xTaskPriorityInherit+0x104>)
 80040f2:	441a      	add	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f7fe fdd6 	bl	8002cac <vListInsertEnd>
 8004100:	e004      	b.n	800410c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <xTaskPriorityInherit+0x100>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e008      	b.n	8004124 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <xTaskPriorityInherit+0x100>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d201      	bcs.n	8004124 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004124:	68fb      	ldr	r3, [r7, #12]
	}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000002c 	.word	0x2000002c
 8004134:	20000030 	.word	0x20000030
 8004138:	20000134 	.word	0x20000134

0800413c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d06c      	beq.n	800422c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <xTaskPriorityDisinherit+0xfc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d009      	beq.n	8004170 <xTaskPriorityDisinherit+0x34>
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e7fe      	b.n	800416e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <xTaskPriorityDisinherit+0x50>
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	e7fe      	b.n	800418a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	429a      	cmp	r2, r3
 80041a0:	d044      	beq.n	800422c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d140      	bne.n	800422c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fdd9 	bl	8002d66 <uxListRemove>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d115      	bne.n	80041e6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041be:	491f      	ldr	r1, [pc, #124]	; (800423c <xTaskPriorityDisinherit+0x100>)
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xTaskPriorityDisinherit+0xaa>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <xTaskPriorityDisinherit+0x104>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4013      	ands	r3, r2
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <xTaskPriorityDisinherit+0x104>)
 80041e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f1c3 0207 	rsb	r2, r3, #7
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <xTaskPriorityDisinherit+0x104>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <xTaskPriorityDisinherit+0x104>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <xTaskPriorityDisinherit+0x100>)
 800421a:	441a      	add	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fe fd42 	bl	8002cac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800422c:	697b      	ldr	r3, [r7, #20]
	}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000002c 	.word	0x2000002c
 800423c:	20000030 	.word	0x20000030
 8004240:	20000134 	.word	0x20000134

08004244 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004252:	2301      	movs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8086 	beq.w	800436a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e7fe      	b.n	8004278 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d902      	bls.n	800428a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e002      	b.n	8004290 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	429a      	cmp	r2, r3
 8004298:	d067      	beq.n	800436a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d162      	bne.n	800436a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d109      	bne.n	80042c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e7fe      	b.n	80042c0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db04      	blt.n	80042e0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f1c3 0207 	rsb	r2, r3, #7
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a22      	ldr	r2, [pc, #136]	; (8004378 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80042f0:	4413      	add	r3, r2
 80042f2:	4299      	cmp	r1, r3
 80042f4:	d101      	bne.n	80042fa <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d034      	beq.n	800436a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fd2e 	bl	8002d66 <uxListRemove>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d115      	bne.n	800433c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4918      	ldr	r1, [pc, #96]	; (8004378 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43da      	mvns	r2, r3
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4013      	ands	r3, r2
 8004338:	4a10      	ldr	r2, [pc, #64]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800433a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4313      	orrs	r3, r2
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a07      	ldr	r2, [pc, #28]	; (8004378 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800435c:	441a      	add	r2, r3
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe fca1 	bl	8002cac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800436a:	bf00      	nop
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000002c 	.word	0x2000002c
 8004378:	20000030 	.word	0x20000030
 800437c:	20000134 	.word	0x20000134

08004380 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004392:	3201      	adds	r2, #1
 8004394:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004398:	681b      	ldr	r3, [r3, #0]
	}
 800439a:	4618      	mov	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	2000002c 	.word	0x2000002c

080043a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80043b6:	f000 fa81 	bl	80048bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80043ba:	4b26      	ldr	r3, [pc, #152]	; (8004454 <xTaskNotifyWait+0xac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d01a      	beq.n	80043fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <xTaskNotifyWait+0xac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	43d2      	mvns	r2, r2
 80043d2:	400a      	ands	r2, r1
 80043d4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <xTaskNotifyWait+0xac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043e6:	2101      	movs	r1, #1
 80043e8:	6838      	ldr	r0, [r7, #0]
 80043ea:	f000 f8d7 	bl	800459c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <xTaskNotifyWait+0xb0>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80043fe:	f000 fa8b 	bl	8004918 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004402:	f000 fa5b 	bl	80048bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <xTaskNotifyWait+0xac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <xTaskNotifyWait+0xac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d002      	beq.n	800442a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e008      	b.n	800443c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <xTaskNotifyWait+0xac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	43d2      	mvns	r2, r2
 8004434:	400a      	ands	r2, r1
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <xTaskNotifyWait+0xac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8004446:	f000 fa67 	bl	8004918 <vPortExitCritical>

		return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
	}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	2000002c 	.word	0x2000002c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <xTaskGenericNotify+0x2e>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e7fe      	b.n	8004488 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800448e:	f000 fa15 	bl	80048bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d827      	bhi.n	8004506 <xTaskGenericNotify+0xaa>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <xTaskGenericNotify+0x60>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	08004507 	.word	0x08004507
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044df 	.word	0x080044df
 80044c8:	080044eb 	.word	0x080044eb
 80044cc:	080044f3 	.word	0x080044f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80044dc:	e013      	b.n	8004506 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80044e8:	e00d      	b.n	8004506 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80044f0:	e009      	b.n	8004506 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d003      	beq.n	8004500 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80044fe:	e001      	b.n	8004504 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8004500:	2300      	movs	r3, #0
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004504:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004506:	7ffb      	ldrb	r3, [r7, #31]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d138      	bne.n	800457e <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	3304      	adds	r3, #4
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fc28 	bl	8002d66 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	2201      	movs	r2, #1
 800451c:	409a      	lsls	r2, r3
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xTaskGenericNotify+0x130>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <xTaskGenericNotify+0x130>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <xTaskGenericNotify+0x134>)
 8004536:	441a      	add	r2, r3
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fe fbb4 	bl	8002cac <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <xTaskGenericNotify+0x104>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e7fe      	b.n	800455e <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <xTaskGenericNotify+0x138>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	429a      	cmp	r2, r3
 800456c:	d907      	bls.n	800457e <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <xTaskGenericNotify+0x13c>)
 8004570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800457e:	f000 f9cb 	bl	8004918 <vPortExitCritical>

		return xReturn;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004584:	4618      	mov	r0, r3
 8004586:	3728      	adds	r7, #40	; 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000134 	.word	0x20000134
 8004590:	20000030 	.word	0x20000030
 8004594:	2000002c 	.word	0x2000002c
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <prvAddCurrentTaskToDelayedList+0xb0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fbd7 	bl	8002d66 <uxListRemove>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	2201      	movs	r2, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4013      	ands	r3, r2
 80045d2:	4a20      	ldr	r2, [pc, #128]	; (8004654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d10a      	bne.n	80045f4 <prvAddCurrentTaskToDelayedList+0x58>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	481a      	ldr	r0, [pc, #104]	; (8004658 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045ee:	f7fe fb5d 	bl	8002cac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045f2:	e026      	b.n	8004642 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d209      	bcs.n	8004620 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <prvAddCurrentTaskToDelayedList+0xc0>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe fb6b 	bl	8002cf4 <vListInsert>
}
 800461e:	e010      	b.n	8004642 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7fe fb61 	bl	8002cf4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d202      	bcs.n	8004642 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <prvAddCurrentTaskToDelayedList+0xc8>)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000130 	.word	0x20000130
 8004650:	2000002c 	.word	0x2000002c
 8004654:	20000134 	.word	0x20000134
 8004658:	20000118 	.word	0x20000118
 800465c:	200000e8 	.word	0x200000e8
 8004660:	200000e4 	.word	0x200000e4
 8004664:	2000014c 	.word	0x2000014c

08004668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b04      	subs	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b04      	subs	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b04      	subs	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004698:	4a0c      	ldr	r2, [pc, #48]	; (80046cc <pxPortInitialiseStack+0x64>)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b14      	subs	r3, #20
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f06f 0202 	mvn.w	r2, #2
 80046b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b20      	subs	r3, #32
 80046bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	080046d1 	.word	0x080046d1

080046d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <prvTaskExitError+0x50>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d009      	beq.n	80046f8 <prvTaskExitError+0x28>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e7fe      	b.n	80046f6 <prvTaskExitError+0x26>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800470a:	bf00      	nop
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0fc      	beq.n	800470c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000008 	.word	0x20000008
	...

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800477a:	bf00      	nop
 800477c:	e000ed08 	.word	0xe000ed08

08004780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004786:	4b44      	ldr	r3, [pc, #272]	; (8004898 <xPortStartScheduler+0x118>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a44      	ldr	r2, [pc, #272]	; (800489c <xPortStartScheduler+0x11c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <xPortStartScheduler+0x24>
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e7fe      	b.n	80047a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047a4:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <xPortStartScheduler+0x118>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <xPortStartScheduler+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d109      	bne.n	80047c2 <xPortStartScheduler+0x42>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e7fe      	b.n	80047c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047c2:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <xPortStartScheduler+0x124>)
 80047c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <xPortStartScheduler+0x128>)
 80047e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ea:	4b30      	ldr	r3, [pc, #192]	; (80048ac <xPortStartScheduler+0x12c>)
 80047ec:	2207      	movs	r2, #7
 80047ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f0:	e009      	b.n	8004806 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <xPortStartScheduler+0x12c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <xPortStartScheduler+0x12c>)
 80047fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d0ef      	beq.n	80047f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <xPortStartScheduler+0x12c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	d009      	beq.n	8004832 <xPortStartScheduler+0xb2>
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	e7fe      	b.n	8004830 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <xPortStartScheduler+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <xPortStartScheduler+0x12c>)
 800483a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <xPortStartScheduler+0x12c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <xPortStartScheduler+0x12c>)
 8004846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <xPortStartScheduler+0x130>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <xPortStartScheduler+0x130>)
 8004856:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800485a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <xPortStartScheduler+0x130>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <xPortStartScheduler+0x130>)
 8004862:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004868:	f000 f8d6 	bl	8004a18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <xPortStartScheduler+0x134>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004872:	f000 f8f5 	bl	8004a60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <xPortStartScheduler+0x138>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <xPortStartScheduler+0x138>)
 800487c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004880:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004882:	f7ff ff69 	bl	8004758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004886:	f7ff f999 	bl	8003bbc <vTaskSwitchContext>
	prvTaskExitError();
 800488a:	f7ff ff21 	bl	80046d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed00 	.word	0xe000ed00
 800489c:	410fc271 	.word	0x410fc271
 80048a0:	410fc270 	.word	0x410fc270
 80048a4:	e000e400 	.word	0xe000e400
 80048a8:	20000158 	.word	0x20000158
 80048ac:	2000015c 	.word	0x2000015c
 80048b0:	e000ed20 	.word	0xe000ed20
 80048b4:	20000008 	.word	0x20000008
 80048b8:	e000ef34 	.word	0xe000ef34

080048bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <vPortEnterCritical+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <vPortEnterCritical+0x54>)
 80048dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <vPortEnterCritical+0x54>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10e      	bne.n	8004904 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <vPortEnterCritical+0x58>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <vPortEnterCritical+0x48>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	e7fe      	b.n	8004902 <vPortEnterCritical+0x46>
	}
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000008 	.word	0x20000008
 8004914:	e000ed04 	.word	0xe000ed04

08004918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <vPortExitCritical+0x4c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <vPortExitCritical+0x22>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	e7fe      	b.n	8004938 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <vPortExitCritical+0x4c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <vPortExitCritical+0x4c>)
 8004942:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <vPortExitCritical+0x4c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <vPortExitCritical+0x3e>
 800494c:	2300      	movs	r3, #0
 800494e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000008 	.word	0x20000008
	...

08004970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004970:	f3ef 8009 	mrs	r0, PSP
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pxCurrentTCBConst>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f01e 0f10 	tst.w	lr, #16
 8004980:	bf08      	it	eq
 8004982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	6010      	str	r0, [r2, #0]
 800498c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004994:	f380 8811 	msr	BASEPRI, r0
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f7ff f90c 	bl	8003bbc <vTaskSwitchContext>
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f380 8811 	msr	BASEPRI, r0
 80049ac:	bc09      	pop	{r0, r3}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b6:	f01e 0f10 	tst.w	lr, #16
 80049ba:	bf08      	it	eq
 80049bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049c0:	f380 8809 	msr	PSP, r0
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst>:
 80049d0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049f0:	f7ff f828 	bl	8003a44 <xTaskIncrementTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <SysTick_Handler+0x3c>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <vPortSetupTimerInterrupt+0x34>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortSetupTimerInterrupt+0x38>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <vPortSetupTimerInterrupt+0x3c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <vPortSetupTimerInterrupt+0x40>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <vPortSetupTimerInterrupt+0x44>)
 8004a36:	3b01      	subs	r3, #1
 8004a38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <vPortSetupTimerInterrupt+0x34>)
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e010 	.word	0xe000e010
 8004a50:	e000e018 	.word	0xe000e018
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	10624dd3 	.word	0x10624dd3
 8004a5c:	e000e014 	.word	0xe000e014

08004a60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a70 <vPortEnableVFP+0x10>
 8004a64:	6801      	ldr	r1, [r0, #0]
 8004a66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a6a:	6001      	str	r1, [r0, #0]
 8004a6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a6e:	bf00      	nop
 8004a70:	e000ed88 	.word	0xe000ed88

08004a74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	; 0x28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a80:	f7fe ff36 	bl	80038f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a84:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <pvPortMalloc+0x170>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a8c:	f000 f90c 	bl	8004ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a90:	4b55      	ldr	r3, [pc, #340]	; (8004be8 <pvPortMalloc+0x174>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 808c 	bne.w	8004bb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01c      	beq.n	8004ade <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d013      	beq.n	8004ade <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	3308      	adds	r3, #8
 8004abe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <pvPortMalloc+0x6a>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e7fe      	b.n	8004adc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d068      	beq.n	8004bb6 <pvPortMalloc+0x142>
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <pvPortMalloc+0x178>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d863      	bhi.n	8004bb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <pvPortMalloc+0x17c>)
 8004af0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <pvPortMalloc+0x17c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004af8:	e004      	b.n	8004b04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d903      	bls.n	8004b16 <pvPortMalloc+0xa2>
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f1      	bne.n	8004afa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b16:	4b33      	ldr	r3, [pc, #204]	; (8004be4 <pvPortMalloc+0x170>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d04a      	beq.n	8004bb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2208      	movs	r2, #8
 8004b26:	4413      	add	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	1ad2      	subs	r2, r2, r3
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d91e      	bls.n	8004b80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <pvPortMalloc+0xf4>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e7fe      	b.n	8004b66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b7a:	69b8      	ldr	r0, [r7, #24]
 8004b7c:	f000 f8f6 	bl	8004d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <pvPortMalloc+0x178>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	4a18      	ldr	r2, [pc, #96]	; (8004bec <pvPortMalloc+0x178>)
 8004b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <pvPortMalloc+0x178>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <pvPortMalloc+0x180>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d203      	bcs.n	8004ba2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b9a:	4b14      	ldr	r3, [pc, #80]	; (8004bec <pvPortMalloc+0x178>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <pvPortMalloc+0x180>)
 8004ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <pvPortMalloc+0x174>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bb6:	f7fe fea9 	bl	800390c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <pvPortMalloc+0x164>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e7fe      	b.n	8004bd6 <pvPortMalloc+0x162>
	return pvReturn;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000d20 	.word	0x20000d20
 8004be8:	20000d2c 	.word	0x20000d2c
 8004bec:	20000d24 	.word	0x20000d24
 8004bf0:	20000d18 	.word	0x20000d18
 8004bf4:	20000d28 	.word	0x20000d28

08004bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d046      	beq.n	8004c98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	425b      	negs	r3, r3
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <vPortFree+0xa8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <vPortFree+0x42>
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e7fe      	b.n	8004c38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <vPortFree+0x5e>
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	e7fe      	b.n	8004c54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <vPortFree+0xa8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d019      	beq.n	8004c98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vPortFree+0xa8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c7c:	f7fe fe38 	bl	80038f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <vPortFree+0xac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	4a06      	ldr	r2, [pc, #24]	; (8004ca4 <vPortFree+0xac>)
 8004c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f000 f86c 	bl	8004d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c94:	f7fe fe3a 	bl	800390c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000d2c 	.word	0x20000d2c
 8004ca4:	20000d24 	.word	0x20000d24

08004ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <prvHeapInit+0xac>)
 8004cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <prvHeapInit+0xac>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <prvHeapInit+0xb0>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <prvHeapInit+0xb0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvHeapInit+0xb4>)
 8004d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <prvHeapInit+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <prvHeapInit+0xb4>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <prvHeapInit+0xb8>)
 8004d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <prvHeapInit+0xbc>)
 8004d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <prvHeapInit+0xc0>)
 8004d42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d46:	601a      	str	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000160 	.word	0x20000160
 8004d58:	20000d18 	.word	0x20000d18
 8004d5c:	20000d20 	.word	0x20000d20
 8004d60:	20000d28 	.word	0x20000d28
 8004d64:	20000d24 	.word	0x20000d24
 8004d68:	20000d2c 	.word	0x20000d2c

08004d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <prvInsertBlockIntoFreeList+0xac>)
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e002      	b.n	8004d80 <prvInsertBlockIntoFreeList+0x14>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d8f7      	bhi.n	8004d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d108      	bne.n	8004dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	441a      	add	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d118      	bne.n	8004df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <prvInsertBlockIntoFreeList+0xb0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d00d      	beq.n	8004dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e008      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <prvInsertBlockIntoFreeList+0xb0>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e003      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d002      	beq.n	8004e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000d18 	.word	0x20000d18
 8004e1c:	20000d20 	.word	0x20000d20

08004e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b090      	sub	sp, #64	; 0x40
 8004e24:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e26:	f7fb fb53 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e2a:	f000 f851 	bl	8004ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e2e:	f000 f901 	bl	8005034 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004e32:	f000 f8cf 	bl	8004fd4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 8004e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fefb 	bl	8002c3a <osMutexCreate>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <main+0x94>)
 8004e48:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <main+0x98>)
 8004e4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004e50:	461d      	mov	r5, r3
 8004e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fd feaf 	bl	8002bc4 <osThreadCreate>
 8004e66:	4602      	mov	r2, r0
 8004e68:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <main+0x9c>)
 8004e6a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8004e6c:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <main+0xa0>)
 8004e6e:	f107 0414 	add.w	r4, r7, #20
 8004e72:	461d      	mov	r5, r3
 8004e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd fe9e 	bl	8002bc4 <osThreadCreate>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <main+0xa4>)
 8004e8c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myTask03, Thread3, osPriorityIdle, 0, 128);
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <main+0xa8>)
 8004e90:	463c      	mov	r4, r7
 8004e92:	461d      	mov	r5, r3
 8004e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	6023      	str	r3, [r4, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fe8f 	bl	8002bc4 <osThreadCreate>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <main+0xac>)
 8004eaa:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004eac:	f7fd fe83 	bl	8002bb6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004eb0:	e7fe      	b.n	8004eb0 <main+0x90>
 8004eb2:	bf00      	nop
 8004eb4:	20000d3c 	.word	0x20000d3c
 8004eb8:	080055d8 	.word	0x080055d8
 8004ebc:	20000d34 	.word	0x20000d34
 8004ec0:	080055f8 	.word	0x080055f8
 8004ec4:	20000d38 	.word	0x20000d38
 8004ec8:	08005618 	.word	0x08005618
 8004ecc:	20000d40 	.word	0x20000d40

08004ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0ac      	sub	sp, #176	; 0xb0
 8004ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004eda:	2244      	movs	r2, #68	; 0x44
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb5b 	bl	800559a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ee4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	2254      	movs	r2, #84	; 0x54
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fb4d 	bl	800559a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004f00:	f7fb fdb2 	bl	8000a68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <SystemClock_Config+0x100>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <SystemClock_Config+0x100>)
 8004f0c:	f023 0318 	bic.w	r3, r3, #24
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004f14:	2314      	movs	r3, #20
 8004f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004f28:	2360      	movs	r3, #96	; 0x60
 8004f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8004f40:	2310      	movs	r3, #16
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004f46:	2307      	movs	r3, #7
 8004f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004f52:	2302      	movs	r3, #2
 8004f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb fdf7 	bl	8000b50 <HAL_RCC_OscConfig>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004f68:	f000 f98b 	bl	8005282 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f70:	2303      	movs	r3, #3
 8004f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f74:	2300      	movs	r3, #0
 8004f76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004f80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f84:	2101      	movs	r1, #1
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fc f9d0 	bl	800132c <HAL_RCC_ClockConfig>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004f92:	f000 f976 	bl	8005282 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f96:	2302      	movs	r3, #2
 8004f98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fc fbf9 	bl	8001798 <HAL_RCCEx_PeriphCLKConfig>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8004fac:	f000 f969 	bl	8005282 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004fb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004fb4:	f7fb fd76 	bl	8000aa4 <HAL_PWREx_ControlVoltageScaling>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004fbe:	f000 f960 	bl	8005282 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004fc2:	f7fc fddb 	bl	8001b7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8004fc6:	bf00      	nop
 8004fc8:	37b0      	adds	r7, #176	; 0xb0
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004fda:	4a15      	ldr	r2, [pc, #84]	; (8005030 <MX_USART2_UART_Init+0x5c>)
 8004fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <MX_USART2_UART_Init+0x58>)
 8004ffa:	220c      	movs	r2, #12
 8004ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <MX_USART2_UART_Init+0x58>)
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <MX_USART2_UART_Init+0x58>)
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <MX_USART2_UART_Init+0x58>)
 800500c:	2200      	movs	r2, #0
 800500e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <MX_USART2_UART_Init+0x58>)
 8005012:	2200      	movs	r2, #0
 8005014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005016:	4805      	ldr	r0, [pc, #20]	; (800502c <MX_USART2_UART_Init+0x58>)
 8005018:	f7fd f8da 	bl	80021d0 <HAL_UART_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005022:	f000 f92e 	bl	8005282 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000d44 	.word	0x20000d44
 8005030:	40004400 	.word	0x40004400

08005034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800503a:	f107 030c 	add.w	r3, r7, #12
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	60da      	str	r2, [r3, #12]
 8005048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <MX_GPIO_Init+0xa8>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4a23      	ldr	r2, [pc, #140]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005056:	4b21      	ldr	r3, [pc, #132]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	60bb      	str	r3, [r7, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <MX_GPIO_Init+0xa8>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <MX_GPIO_Init+0xa8>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005092:	2200      	movs	r2, #0
 8005094:	2108      	movs	r1, #8
 8005096:	4812      	ldr	r0, [pc, #72]	; (80050e0 <MX_GPIO_Init+0xac>)
 8005098:	f7fb fcb4 	bl	8000a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800509c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80050aa:	f107 030c 	add.w	r3, r7, #12
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f7fb fb24 	bl	8000700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80050b8:	2308      	movs	r3, #8
 80050ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050bc:	2301      	movs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80050c8:	f107 030c 	add.w	r3, r7, #12
 80050cc:	4619      	mov	r1, r3
 80050ce:	4804      	ldr	r0, [pc, #16]	; (80050e0 <MX_GPIO_Init+0xac>)
 80050d0:	f7fb fb16 	bl	8000700 <HAL_GPIO_Init>

}
 80050d4:	bf00      	nop
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	48000400 	.word	0x48000400

080050e4 <Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Thread1 */
void Thread1(void const * argument)
{
 80050e4:	b5b0      	push	{r4, r5, r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	uint8_t data[24] = " Hello from Thread 1\r\n";
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <Thread1+0x64>)
 80050ee:	f107 0408 	add.w	r4, r7, #8
 80050f2:	461d      	mov	r5, r3
 80050f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80050fc:	6020      	str	r0, [r4, #0]
 80050fe:	3404      	adds	r4, #4
 8005100:	8021      	strh	r1, [r4, #0]
 8005102:	3402      	adds	r4, #2
 8005104:	0c0b      	lsrs	r3, r1, #16
 8005106:	7023      	strb	r3, [r4, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(uartMutexHandle,portMAX_DELAY);
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <Thread1+0x68>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f04f 31ff 	mov.w	r1, #4294967295
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe f83d 	bl	8003194 <xQueueSemaphoreTake>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800511a:	2108      	movs	r1, #8
 800511c:	480c      	ldr	r0, [pc, #48]	; (8005150 <Thread1+0x6c>)
 800511e:	f7fb fc89 	bl	8000a34 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, data, 24,5);
 8005122:	f107 0108 	add.w	r1, r7, #8
 8005126:	2305      	movs	r3, #5
 8005128:	2218      	movs	r2, #24
 800512a:	480a      	ldr	r0, [pc, #40]	; (8005154 <Thread1+0x70>)
 800512c:	f7fd f89e 	bl	800226c <HAL_UART_Transmit>
	  xSemaphoreGive(uartMutexHandle);
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <Thread1+0x68>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	2200      	movs	r2, #0
 8005138:	2100      	movs	r1, #0
 800513a:	f7fd ff31 	bl	8002fa0 <xQueueGenericSend>
	  osDelay(500);
 800513e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005142:	f7fd fd66 	bl	8002c12 <osDelay>
	  xSemaphoreTake(uartMutexHandle,portMAX_DELAY);
 8005146:	e7e1      	b.n	800510c <Thread1+0x28>
 8005148:	0800562c 	.word	0x0800562c
 800514c:	20000d3c 	.word	0x20000d3c
 8005150:	48000400 	.word	0x48000400
 8005154:	20000d44 	.word	0x20000d44

08005158 <Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2 */
void Thread2(void const * argument)
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2 */
	 uint8_t data[23] = " Hello from Thread 2\r\n";
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <Thread2+0x78>)
 8005162:	f107 0408 	add.w	r4, r7, #8
 8005166:	461d      	mov	r5, r3
 8005168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800516a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800516c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005170:	6020      	str	r0, [r4, #0]
 8005172:	3404      	adds	r4, #4
 8005174:	8021      	strh	r1, [r4, #0]
 8005176:	3402      	adds	r4, #2
 8005178:	0c0b      	lsrs	r3, r1, #16
 800517a:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 800517c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005184:	f7fb fc26 	bl	80009d4 <HAL_GPIO_ReadPin>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11b      	bne.n	80051c6 <Thread2+0x6e>

		  xTaskNotify(myTask03Handle, 0x01,eSetBits);
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <Thread2+0x7c>)
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	2201      	movs	r2, #1
 8005196:	2101      	movs	r1, #1
 8005198:	f7ff f960 	bl	800445c <xTaskGenericNotify>
		  xSemaphoreTake(uartMutexHandle,portMAX_DELAY);
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <Thread2+0x80>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fd fff5 	bl	8003194 <xQueueSemaphoreTake>
		  HAL_UART_Transmit(&huart2, data, 24,10);
 80051aa:	f107 0108 	add.w	r1, r7, #8
 80051ae:	230a      	movs	r3, #10
 80051b0:	2218      	movs	r2, #24
 80051b2:	480a      	ldr	r0, [pc, #40]	; (80051dc <Thread2+0x84>)
 80051b4:	f7fd f85a 	bl	800226c <HAL_UART_Transmit>
		  xSemaphoreGive(uartMutexHandle);
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <Thread2+0x80>)
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	2200      	movs	r2, #0
 80051c0:	2100      	movs	r1, #0
 80051c2:	f7fd feed 	bl	8002fa0 <xQueueGenericSend>
	  }
	  osDelay(500);
 80051c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051ca:	f7fd fd22 	bl	8002c12 <osDelay>
	  if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 80051ce:	e7d5      	b.n	800517c <Thread2+0x24>
 80051d0:	08005644 	.word	0x08005644
 80051d4:	20000d40 	.word	0x20000d40
 80051d8:	20000d3c 	.word	0x20000d3c
 80051dc:	20000d44 	.word	0x20000d44

080051e0 <Thread3>:
  }
  /* USER CODE END Thread2 */
}

void Thread3(void const * argument)
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2 */
	 uint8_t data[24] = " Hello from Thread 3\r\n";
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <Thread3+0x78>)
 80051ea:	f107 0410 	add.w	r4, r7, #16
 80051ee:	461d      	mov	r5, r3
 80051f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80051f8:	6020      	str	r0, [r4, #0]
 80051fa:	3404      	adds	r4, #4
 80051fc:	8021      	strh	r1, [r4, #0]
 80051fe:	3402      	adds	r4, #2
 8005200:	0c0b      	lsrs	r3, r1, #16
 8005202:	7023      	strb	r3, [r4, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 uint32_t notifValue;
  /* Infinite loop */
  for(;;)
  {
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 800520a:	f107 020c 	add.w	r2, r7, #12
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	21ff      	movs	r1, #255	; 0xff
 8005214:	2000      	movs	r0, #0
 8005216:	f7ff f8c7 	bl	80043a8 <xTaskNotifyWait>
	  if((notifValue & 0x01) != 0x00){
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d014      	beq.n	800524e <Thread3+0x6e>
	  xSemaphoreTake(uartMutexHandle,portMAX_DELAY);
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <Thread3+0x7c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f04f 31ff 	mov.w	r1, #4294967295
 800522c:	4618      	mov	r0, r3
 800522e:	f7fd ffb1 	bl	8003194 <xQueueSemaphoreTake>
	  HAL_UART_Transmit(&huart2, data, 24,10);
 8005232:	f107 0110 	add.w	r1, r7, #16
 8005236:	230a      	movs	r3, #10
 8005238:	2218      	movs	r2, #24
 800523a:	4809      	ldr	r0, [pc, #36]	; (8005260 <Thread3+0x80>)
 800523c:	f7fd f816 	bl	800226c <HAL_UART_Transmit>
	  xSemaphoreGive(uartMutexHandle);
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <Thread3+0x7c>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	2200      	movs	r2, #0
 8005248:	2100      	movs	r1, #0
 800524a:	f7fd fea9 	bl	8002fa0 <xQueueGenericSend>
	  }
	  osDelay(500);
 800524e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005252:	f7fd fcde 	bl	8002c12 <osDelay>
	  xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8005256:	e7d8      	b.n	800520a <Thread3+0x2a>
 8005258:	0800565c 	.word	0x0800565c
 800525c:	20000d3c 	.word	0x20000d3c
 8005260:	20000d44 	.word	0x20000d44

08005264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005274:	d101      	bne.n	800527a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005276:	f7fb f943 	bl	8000500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005282:	b480      	push	{r7}
 8005284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005286:	bf00      	nop
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_MspInit+0x4c>)
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	4a10      	ldr	r2, [pc, #64]	; (80052dc <HAL_MspInit+0x4c>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6613      	str	r3, [r2, #96]	; 0x60
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <HAL_MspInit+0x4c>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_MspInit+0x4c>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <HAL_MspInit+0x4c>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_MspInit+0x4c>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052c6:	2200      	movs	r2, #0
 80052c8:	210f      	movs	r1, #15
 80052ca:	f06f 0001 	mvn.w	r0, #1
 80052ce:	f7fb f9ed 	bl	80006ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000

080052e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <HAL_UART_MspInit+0xa0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d13a      	bne.n	8005378 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <HAL_UART_MspInit+0xa4>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <HAL_UART_MspInit+0xa4>)
 8005308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530c:	6593      	str	r3, [r2, #88]	; 0x58
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_UART_MspInit+0xa4>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531a:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_UART_MspInit+0xa4>)
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_UART_MspInit+0xa4>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_UART_MspInit+0xa4>)
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005332:	2304      	movs	r3, #4
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005336:	2302      	movs	r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533e:	2303      	movs	r3, #3
 8005340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005342:	2307      	movs	r3, #7
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4619      	mov	r1, r3
 800534c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005350:	f7fb f9d6 	bl	8000700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005362:	2303      	movs	r3, #3
 8005364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005366:	2303      	movs	r3, #3
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005374:	f7fb f9c4 	bl	8000700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005378:	bf00      	nop
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40004400 	.word	0x40004400
 8005384:	40021000 	.word	0x40021000

08005388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005398:	2200      	movs	r2, #0
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	201c      	movs	r0, #28
 800539e:	f7fb f985 	bl	80006ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80053a2:	201c      	movs	r0, #28
 80053a4:	f7fb f99e 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_InitTick+0xa0>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <HAL_InitTick+0xa0>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6593      	str	r3, [r2, #88]	; 0x58
 80053b4:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <HAL_InitTick+0xa0>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80053c0:	f107 0210 	add.w	r2, r7, #16
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc f952 	bl	8001674 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fc f924 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80053d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	4a14      	ldr	r2, [pc, #80]	; (800542c <HAL_InitTick+0xa4>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0c9b      	lsrs	r3, r3, #18
 80053e0:	3b01      	subs	r3, #1
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_InitTick+0xa8>)
 80053e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_InitTick+0xa8>)
 80053ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053f2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_InitTick+0xa8>)
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_InitTick+0xa8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_InitTick+0xa8>)
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005406:	480a      	ldr	r0, [pc, #40]	; (8005430 <HAL_InitTick+0xa8>)
 8005408:	f7fc fcb8 	bl	8001d7c <HAL_TIM_Base_Init>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8005412:	4807      	ldr	r0, [pc, #28]	; (8005430 <HAL_InitTick+0xa8>)
 8005414:	f7fc fce8 	bl	8001de8 <HAL_TIM_Base_Start_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	e000      	b.n	800541e <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
}
 800541e:	4618      	mov	r0, r3
 8005420:	3730      	adds	r7, #48	; 0x30
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	431bde83 	.word	0x431bde83
 8005430:	20000dc4 	.word	0x20000dc4

08005434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005446:	e7fe      	b.n	8005446 <HardFault_Handler+0x4>

08005448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800544c:	e7fe      	b.n	800544c <MemManage_Handler+0x4>

0800544e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005452:	e7fe      	b.n	8005452 <BusFault_Handler+0x4>

08005454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005458:	e7fe      	b.n	8005458 <UsageFault_Handler+0x4>

0800545a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <TIM2_IRQHandler+0x10>)
 800546e:	f7fc fce5 	bl	8001e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000dc4 	.word	0x20000dc4

0800547c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <SystemInit+0x64>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <SystemInit+0x64>)
 8005488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800548c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <SystemInit+0x68>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <SystemInit+0x68>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <SystemInit+0x68>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80054a2:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <SystemInit+0x68>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a0f      	ldr	r2, [pc, #60]	; (80054e4 <SystemInit+0x68>)
 80054a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80054ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80054b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80054b2:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <SystemInit+0x68>)
 80054b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <SystemInit+0x68>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <SystemInit+0x68>)
 80054c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <SystemInit+0x68>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <SystemInit+0x64>)
 80054ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054d2:	609a      	str	r2, [r3, #8]
#endif
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000ed00 	.word	0xe000ed00
 80054e4:	40021000 	.word	0x40021000

080054e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80054e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005520 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80054ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80054ee:	e003      	b.n	80054f8 <LoopCopyDataInit>

080054f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80054f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80054f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80054f6:	3104      	adds	r1, #4

080054f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80054f8:	480b      	ldr	r0, [pc, #44]	; (8005528 <LoopForever+0xa>)
	ldr	r3, =_edata
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <LoopForever+0xe>)
	adds	r2, r0, r1
 80054fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80054fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005500:	d3f6      	bcc.n	80054f0 <CopyDataInit>
	ldr	r2, =_sbss
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005504:	e002      	b.n	800550c <LoopFillZerobss>

08005506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005506:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005508:	f842 3b04 	str.w	r3, [r2], #4

0800550c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <LoopForever+0x16>)
	cmp	r2, r3
 800550e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005510:	d3f9      	bcc.n	8005506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005512:	f7ff ffb3 	bl	800547c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005516:	f000 f811 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800551a:	f7ff fc81 	bl	8004e20 <main>

0800551e <LoopForever>:

LoopForever:
    b LoopForever
 800551e:	e7fe      	b.n	800551e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005520:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8005524:	080056cc 	.word	0x080056cc
	ldr	r0, =_sdata
 8005528:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800552c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8005530:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8005534:	20000e04 	.word	0x20000e04

08005538 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC1_IRQHandler>
	...

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0d      	ldr	r6, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1ba4      	subs	r4, r4, r6
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2500      	movs	r5, #0
 8005548:	42a5      	cmp	r5, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4e0b      	ldr	r6, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 f82c 	bl	80055ac <_init>
 8005554:	1ba4      	subs	r4, r4, r6
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2500      	movs	r5, #0
 800555a:	42a5      	cmp	r5, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005564:	4798      	blx	r3
 8005566:	3501      	adds	r5, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800556e:	4798      	blx	r3
 8005570:	3501      	adds	r5, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	080056c4 	.word	0x080056c4
 8005578:	080056c4 	.word	0x080056c4
 800557c:	080056c4 	.word	0x080056c4
 8005580:	080056c8 	.word	0x080056c8

08005584 <memcpy>:
 8005584:	b510      	push	{r4, lr}
 8005586:	1e43      	subs	r3, r0, #1
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	d100      	bne.n	8005590 <memcpy+0xc>
 800558e:	bd10      	pop	{r4, pc}
 8005590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005598:	e7f7      	b.n	800558a <memcpy+0x6>

0800559a <memset>:
 800559a:	4402      	add	r2, r0
 800559c:	4603      	mov	r3, r0
 800559e:	4293      	cmp	r3, r2
 80055a0:	d100      	bne.n	80055a4 <memset+0xa>
 80055a2:	4770      	bx	lr
 80055a4:	f803 1b01 	strb.w	r1, [r3], #1
 80055a8:	e7f9      	b.n	800559e <memset+0x4>
	...

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
